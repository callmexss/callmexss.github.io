<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>像素书</title>
  
  <subtitle>叙事诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://callmexss.github.io/"/>
  <updated>2019-03-30T00:54:13.986Z</updated>
  <id>https://callmexss.github.io/</id>
  
  <author>
    <name>许山山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络实验——链路层、网络层</title>
    <link href="https://callmexss.github.io/2019/03/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94%E9%93%BE%E8%B7%AF%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://callmexss.github.io/2019/03/28/计算机网络实验——链路层、网络层/</id>
    <published>2019-03-28T13:41:05.000Z</published>
    <updated>2019-03-30T00:54:13.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>实验主要来源于Rechard Stevens 的《TCP/IP illustrated》（《TCP/IP 详解》）卷一和刘超老师的极客时间专栏《趣谈网络协议》，实验网络拓扑基于docker搭建，github地址戳<a href="https://github.com/popsuper1982/tcpipillustrated" target="_blank" rel="noopener">这里</a>。</p><p>网络拓扑如下图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/40-experiment_environment.jpg" title="图1 实验的网络拓扑"><p>具体的搭建过程可以看刘超老师写的一篇博文：<a href="https://blog.csdn.net/popsuper1982/article/details/79422735" target="_blank" rel="noopener">有了Openvswitch和Docker，终于可以做《TCP/IP详解》的实验了！</a>。</p><p>脚本基本上是一键安装运行的，但是有一点要注意，就是下面的命令中，<code>./setupenv.sh</code>后面一定要跟你自己机器的网络接口（否则可能docker容器访问不了外网），例如我的机器是<strong>eth1</strong>，那么就是<code>./setupenv.sh eth1 hub.c.163.com/liuchao110119163/ubuntu:tcpip</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/popsuper1982/tcpipillustrated.git</span><br><span class="line"><span class="built_in">cd</span> tcpipillustrated</span><br><span class="line">docker pull hub.c.163.com/liuchao110119163/ubuntu:tcpip</span><br><span class="line">chmod +x setupenv.sh</span><br><span class="line">./setupenv.sh enp0s3 hub.c.163.com/liuchao110119163/ubuntu:tcpip</span><br></pre></td></tr></table></figure><p>如果还有问题欢迎留言交流。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><h3 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h3><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="ARP实验"><a href="#ARP实验" class="headerlink" title="ARP实验"></a>ARP实验</h3><p>先来简单回顾一下ARP协议，它的全称是Address Resolution Protocol，中文名地址解析协议，作用是进行IP地址到MAC地址的映射。过程可以看下面两张图：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/5-arp_request.jpg" title="图2 ARP请求"><img src="/2019/03/28/计算机网络实验——链路层、网络层/5-arp_process.jpg" title="图3 ARP的过程"><p>ARP是基于以太网帧进行封装的，关于ARP协议具体工作与哪一层还有争议，网上一篇<a href="https://blog.csdn.net/ysdaniel/article/details/6785257" target="_blank" rel="noopener">博文</a>这个说法我认为比较合理：</p><blockquote><p>可以这样说，在OSI模型中ARP协议属于链路层；而在TCP/IP模型中，ARP协议属于网络层。</p></blockquote><p>不过除了考试做题，这个争议没用什么意义。比较关键的是以太网帧的结构，如下图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/5-ethernet_frame_format.jpg" title="图 以太网帧结构"><p>ARP包在以太网帧的基础上进行封装，包结构如下图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/5-arp_packet_format.jpg" title="图5 ARP包结构"><p>有了上面的基础，现在可以开始做实验了。</p><h4 id="ARPPing实验"><a href="#ARPPing实验" class="headerlink" title="ARPPing实验"></a>ARPPing实验</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">bsdi</td><td style="text-align:center">140.242.13.35</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">sun</td><td style="text-align:center">140.252.13.33</td></tr></tbody></table><p>使用scapy可以很简单的进行ARPPing：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line"><span class="comment"># `srp` means send and receive packet</span></span><br><span class="line"><span class="comment"># ethernet frame `dst` field is broadcast</span></span><br><span class="line"><span class="comment"># arp packet encapsulated in ethernet frame data</span></span><br><span class="line"><span class="comment"># send arp packet from bsdi to sun</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans, unans = srp(Ether(dst=<span class="string">"ff:ff:ff:ff:ff:ff"</span>) / ARP(pdst=<span class="string">"140.252.13.33"</span>))</span><br><span class="line">Begin emission:</span><br><span class="line">*Finished sending <span class="number">1</span> packets.</span><br><span class="line"></span><br><span class="line">Received <span class="number">1</span> packets, got <span class="number">1</span> answers, remaining <span class="number">0</span> packets</span><br><span class="line"></span><br><span class="line"><span class="comment"># inspect ans</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">&lt;Results: TCP:<span class="number">0</span> UDP:<span class="number">0</span> ICMP:<span class="number">0</span> Other:<span class="number">1</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># from the output of srp we can see that</span></span><br><span class="line"><span class="comment"># a packet was sent and a packet was received</span></span><br><span class="line"><span class="comment"># see ans.summary()</span></span><br><span class="line"><span class="comment"># it was the request and response of a arp process</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans.summary()</span><br><span class="line">Ether / ARP who has 140.252.13.33 says 140.252.13.35 ==&gt; Ether / ARP is at 86:43:ab:ea:6e:96 says 140.252.13.33</span><br><span class="line"></span><br><span class="line"><span class="comment"># see the content of the ans tuple</span></span><br><span class="line"><span class="comment"># ans[0][0] is the arp request</span></span><br><span class="line"><span class="comment"># ans[0][1] is the arp reply</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans[<span class="number">0</span>]</span><br><span class="line">(&lt;Ether  dst=ff:ff:ff:ff:ff:ff type=<span class="number">0x806</span> |&lt;ARP  pdst=<span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> |&gt;&gt;,</span><br><span class="line"> &lt;Ether  dst=<span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span> src=<span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span> type=<span class="number">0x806</span> |&lt;ARP  hwtype=<span class="number">0x1</span> ptype=<span class="number">0x800</span> hwlen=<span class="number">6</span> plen=<span class="number">4</span> op=<span class="keyword">is</span>-at hwsrc=<span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span> psrc=<span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> hwdst=<span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span> pdst=<span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> |&gt;&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># see the request packet format</span></span><br><span class="line"><span class="comment"># the `dst` field is a broadcast address</span></span><br><span class="line"><span class="comment"># notice that the `type` field is 0x0806</span></span><br><span class="line"><span class="comment"># which means arp</span></span><br><span class="line"><span class="comment"># hwtype(hardware type) value 1 means ethernet</span></span><br><span class="line"><span class="comment"># ptype(protocol type) value 0x0800 means IP</span></span><br><span class="line"><span class="comment"># hwlen should be 6(length of MAC address)</span></span><br><span class="line"><span class="comment"># plen should be 4(length of IP addres)</span></span><br><span class="line"><span class="comment"># op `who-has` means request opreation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans[<span class="number">0</span>][<span class="number">0</span>].show()</span><br><span class="line"><span class="comment">###[ Ethernet ]###</span></span><br><span class="line">  dst= ff:ff:ff:ff:ff:ff</span><br><span class="line">  src= <span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span></span><br><span class="line">  type= <span class="number">0x806</span></span><br><span class="line"><span class="comment">###[ ARP ]###</span></span><br><span class="line">     hwtype= <span class="number">0x1</span></span><br><span class="line">     ptype= <span class="number">0x800</span></span><br><span class="line">     hwlen= <span class="literal">None</span></span><br><span class="line">     plen= <span class="literal">None</span></span><br><span class="line">     op= who-has</span><br><span class="line">     hwsrc= <span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span></span><br><span class="line">     psrc= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">     hwdst= <span class="literal">None</span></span><br><span class="line">     pdst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># see the reply packet format</span></span><br><span class="line"><span class="comment"># its `dst` field is the `src' filed of request packet</span></span><br><span class="line"><span class="comment"># `type` is also 0x806</span></span><br><span class="line"><span class="comment"># op `is-at` means arp reply</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans[<span class="number">0</span>][<span class="number">1</span>].show()</span><br><span class="line"><span class="comment">###[ Ethernet ]###</span></span><br><span class="line">  dst= <span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span></span><br><span class="line">  src= <span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span></span><br><span class="line">  type= <span class="number">0x806</span></span><br><span class="line"><span class="comment">###[ ARP ]###</span></span><br><span class="line">     hwtype= <span class="number">0x1</span></span><br><span class="line">     ptype= <span class="number">0x800</span></span><br><span class="line">     hwlen= <span class="number">6</span></span><br><span class="line">     plen= <span class="number">4</span></span><br><span class="line">     op= <span class="keyword">is</span>-at</span><br><span class="line">     hwsrc= <span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span></span><br><span class="line">     psrc= <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line">     hwdst= <span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span></span><br><span class="line">     pdst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br></pre></td></tr></table></figure><p>使用tcpdump在sun端进行抓包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -i select interface</span></span><br><span class="line"><span class="comment"># -n do not resolve IP address</span></span><br><span class="line">root@70aa710235b6:$ tcpdump -i eth1 -n</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">00:35:44.116294 ARP, Request who-has 140.252.13.33 tell 140.252.13.35, length 42</span><br><span class="line">00:35:44.116317 ARP, Reply 140.252.13.33 is-at 86:43:ab:ea:6e:96, length 28</span><br><span class="line"></span><br><span class="line"><span class="comment"># add -vv</span></span><br><span class="line">root@70aa710235b6:$ tcpdump -i eth1 -n -vv</span><br><span class="line">tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">00:50:14.050065 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.33 tell 140.252.13.35, length 42</span><br><span class="line">00:50:14.050087 ARP, Ethernet (len 6), IPv4 (len 4), Reply 140.252.13.33 is-at 86:43:ab:ea:6e:96, length 28</span><br></pre></td></tr></table></figure><p>本实验使用scapy构造并发送了一个简单的ARP包，并在目标主机使用tcpdump进行了抓包操作。主要是为了对ARP协议的功能和包结构有一个直观的认识。完整的ARPPing实际可以一次性对一个网段内的所有主机进行进行Ping测试，scapy代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arp ping to subnet 140.252.13.32-63</span></span><br><span class="line"><span class="comment"># net 140.252.13.32</span></span><br><span class="line"><span class="comment"># mask 255.255.255.224</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans, unans = srp(Ether(dst=<span class="string">"ff:ff:ff:ff:ff:ff"</span>)/ARP(pdst=<span class="string">"140.252.13.32/27"</span>),</span><br><span class="line">                     timeout=<span class="number">2</span>)</span><br><span class="line">Begin emission:</span><br><span class="line">**Finished sending <span class="number">32</span> packets.</span><br><span class="line"></span><br><span class="line">Received <span class="number">2</span> packets, got <span class="number">2</span> answers, remaining <span class="number">30</span> packets</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans.summary()</span><br><span class="line">Ether / ARP who has 140.252.13.33 says 140.252.13.35 ==&gt; Ether / ARP is at 86:43:ab:ea:6e:96 says 140.252.13.33</span><br><span class="line">Ether / ARP who has 140.252.13.34 says 140.252.13.35 ==&gt; Ether / ARP is at 22:8a:5c:68:86:ec says 140.252.13.34</span><br></pre></td></tr></table></figure><img src="/2019/03/28/计算机网络实验——链路层、网络层/arpping.jpg" title="图6 ARPPing 140.252.13.32/27"><p>结合实验拓扑可以看出结果符合预期。子网140.252.13.32/27可以表示为140.252.13.001 00000，bsdi主机的一个网卡接口的IP地址为140.252.13.001 00011，sun主机的一个网卡接口的IP地址140.252.13.33/27表示为140.252.13.001 00001，svr4主机的一个网卡接口的IP地址可以表示为140.252.13.001 00010，根据子网划分的规则可以看出bsdi、sun和svr4都属于同一个子网。而主机slip的网卡接口的IP地址表示为140.252.13.010 00001，不属于子网140.252.13.001 00000。因此从bsdi发起的ARPPing应该能收到sun和svr4的ARP响应，但是收不到slip的ARP响应。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">140.252.13.32/27</th><th style="text-align:center">140.252.13.001 00000</th></tr></thead><tbody><tr><td style="text-align:center">bsdi</td><td style="text-align:center">140.252.32.35/27</td><td style="text-align:center">140.242.13.001 00011</td></tr><tr><td style="text-align:center">sun</td><td style="text-align:center">140.252.32.33/27</td><td style="text-align:center">140.252.13.001 00001</td></tr><tr><td style="text-align:center">svr4</td><td style="text-align:center">140.252.32.34/27</td><td style="text-align:center">140.252.13.001 00010</td></tr><tr><td style="text-align:center">slip</td><td style="text-align:center">140.252.32.65/27</td><td style="text-align:center">140.252.13.010 00001</td></tr></tbody></table><h4 id="使用telnet连接无效服务器"><a href="#使用telnet连接无效服务器" class="headerlink" title="使用telnet连接无效服务器"></a>使用telnet连接无效服务器</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">bsdi</td><td style="text-align:center">140.242.13.35</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">svr4</td><td style="text-align:center">140.252.13.34</td></tr></tbody></table><p>从bsdi向svr4发起telnet连接，再svr4使用tcpdump抓包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line">root@d70675fa03bc:$ telnet 140.252.13.34 22</span><br><span class="line">Trying 140.252.13.34...</span><br><span class="line">Connected to 140.252.13.34.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.6</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># svr4</span></span><br><span class="line">root@6b628ae5483f:$ tcpdump -i eth1 -n -vv arp</span><br><span class="line">tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">12:38:25.752415 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.34 tell 140.252.13.35, length 28</span><br><span class="line">12:38:25.752433 ARP, Ethernet (len 6), IPv4 (len 4), Reply 140.252.13.34 is-at 22:8a:5c:68:86:ec, length 28</span><br><span class="line">12:38:30.763321 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.35 tell 140.252.13.34, length 28</span><br><span class="line">12:38:30.763927 ARP, Ethernet (len 6), IPv4 (len 4), Reply 140.252.13.35 is-at 02:1c:55:0e:bb:87, length 28</span><br></pre></td></tr></table></figure><p>本实验说明再进行上层通信前需要先获取局域网内主机的MAC地址。</p><p>查看一下bsdi的ARP缓存，可以看到bsdi已经将svr4的MAC地址加入了缓存中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@d70675fa03bc:$ arp -n</span><br><span class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</span><br><span class="line">140.252.13.34            ether   22:8a:5c:68:86:ec   C                     eth1</span><br><span class="line">140.252.13.65                    (incomplete)                              bsdiside</span><br><span class="line">140.252.13.33                    (incomplete)                              eth1</span><br></pre></td></tr></table></figure><h4 id="使用telnet连接不存在主机"><a href="#使用telnet连接不存在主机" class="headerlink" title="使用telnet连接不存在主机"></a>使用telnet连接不存在主机</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">bsdi</td><td style="text-align:center">140.242.13.35</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">????</td><td style="text-align:center">140.252.13.36</td></tr></tbody></table><p>注意<strong>目的主机不存在</strong>，根据网络号和子网号所对应的网络确实存在，但是并不存在所指定的主机号。从图1可以看出，主机号从36到62的主机并不存在（主机号为63是广播地址）。这里用主机号36来举例。使用一个shell发起telnet连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line">root@d70675fa03bc:$ date; telnet 140.252.13.36;date</span><br><span class="line">Fri Mar 29 12:51:34 UTC 2019</span><br><span class="line">Trying 140.252.13.36...</span><br><span class="line">telnet: Unable to connect to remote host: No route to host</span><br><span class="line">Fri Mar 29 12:51:37 UTC 2019</span><br></pre></td></tr></table></figure><p>另一个shell使用tcpdump进行抓包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line">root@d70675fa03bc:$ tcpdump -i eth1 -n -vv</span><br><span class="line">tcpdump: listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">12:51:34.301832 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.36 tell 140.252.13.35, length 28</span><br><span class="line">12:51:35.299308 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.36 tell 140.252.13.35, length 28</span><br><span class="line">12:51:36.299308 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 140.252.13.36 tell 140.252.13.35, length 28</span><br></pre></td></tr></table></figure><p>可以看出这里ARP请求重发了三次，说明ARP请求是有重传机制的，重传的间隔约为1s。</p><blockquote><p>注意，在线路上始终看不到TCP的报文段。我们能看到的是ARP请求。直到ARP回答返回时，TCP报文段才可以被发送，因为硬件地址到这时才可能知道。如果我们用过滤模式运行tcpdump命令，只查看TCP数据，那么将没有任何输出。</p></blockquote><h4 id="ARP代理"><a href="#ARP代理" class="headerlink" title="ARP代理"></a>ARP代理</h4><blockquote><p>ARP代理也称作混合ARP（promiscuousARP）或ARP出租(ARP hack)。这些名字来自于ARP代理的其他用途：<strong>通过两个物理网络之间的路由器可以互相隐藏物理网络。</strong>在这种情况下，两个物理网络可以使用相同的网络号，只要把中间的路由器设置成一个ARP代理，以响应一个网络到另一个网络主机的ARP请求。这种技术在过去用来隐藏一组在不同物理电缆上运行旧版TCP/IP的主机。分开这些旧主机有两个共同的理由，其一是它们不能处理子网划分，其二是它们使用旧的广播地址（所有比特值为0的主机号，而不是目前使用的所有比特值为1 的主机号）。<br>如果ARP请求是从一个网络的主机发往另一个网络上的主机，那么连接这两个网络的路由器就可以回答该请求，这个过程称作委托ARP或ARP代理(Proxy ARP)。这样可以欺骗发起ARP请求的发送端，使它误以为路由器就是目的主机，而事实上目的主机是在路由器的“另一边”。路由器的功能相当于目的主机的代理，把分组从其他主机转发给它。</p></blockquote><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">gemini</td><td style="text-align:center">140.252.1.11</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">sun</td><td style="text-align:center">140.242.13.33</td></tr></tbody></table><p>实验拓扑如下图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/5-arp_proxy.jpeg" title="图7 代理ARP"><p>如图1所示，系统sun与两个以太网相连。但是事实上并不是这样，在sun和子网140.252.1之间实际存在一个路由器，就是这个具有ARP代理功能的路由器使得sun就好像在子网140.252.1上一样。具体安置如图7所示，路由器Telebit NetBlazer，取名为netb，在子网和主机sun之间。</p><blockquote><p>当子网140.252.1（称作gemini）上的其他主机有一份IP数据报要传给地址为140.252.1.29的sun时，gemini比较网络号（140.252）和子网号（1），因为它们都是相同的，因而在图7上面的以太网中发送IP地址140.252.1.29的ARP请求。路由器netb识别出该IP地址属于它的一个拔号主机，于是把它的以太网接口地址140.252.1作为硬件地址来回答。主机gemini通过以太网发送IP数据报到netb，netb通过拨号SLIP链路把数据报转发到sun。这个过程对于所有140.252.1子网上的主机来说都是透明的，主机sun实际上是在路由器netb后面进行配置的。</p></blockquote><p>从主机gemini向主机sun发起ssh连接，分别在gemini（右上）、netb（左下）和sun（右下）进行抓包。</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/arp_proxy.png" title="图8 代理ARP实验"><p>完成操作后查看gemini的ARP缓存：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@07928580bdcd:$ arp -n</span><br><span class="line">Address                  HWtype  HWaddress           Flags Mask            Iface</span><br><span class="line">140.252.1.29             ether   32:3a:6f:<span class="built_in">cd</span>:a7:24   C                     eth1</span><br><span class="line">140.252.1.4              ether   c6:74:e6:3b:dd:e6   C                     eth1</span><br><span class="line">140.252.1.183            ether   32:3a:6f:<span class="built_in">cd</span>:a7:24   C                     eth1</span><br></pre></td></tr></table></figure><p>经过与主机sun通信以后，发现在同一个子网140.252.1上的netb和sun的IP地址映射的硬件地址是相同的。这通常是使用委托ARP的线索。netb作为ARP代理，使得sun就像是子网140.252.1的一部分一样。</p><h3 id="IP实验"><a href="#IP实验" class="headerlink" title="IP实验"></a>IP实验</h3><h4 id="bsdi向sun发送数据包"><a href="#bsdi向sun发送数据包" class="headerlink" title="bsdi向sun发送数据包"></a>bsdi向sun发送数据包</h4><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">bsdi</td><td style="text-align:center">140.242.13.35</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">sun</td><td style="text-align:center">140.252.13.33</td></tr></tbody></table><p>在主机bsdi使用scapy构建IP数据包，并发送到sun：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet = IP(dst=<span class="string">"140.252.13.33"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>packet.show()</span><br><span class="line"><span class="comment">###[ IP ]###</span></span><br><span class="line">  version= <span class="number">4</span></span><br><span class="line">  ihl= <span class="literal">None</span></span><br><span class="line">  tos= <span class="number">0x0</span></span><br><span class="line">  len= <span class="literal">None</span></span><br><span class="line">  id= <span class="number">1</span></span><br><span class="line">  flags=</span><br><span class="line">  frag= <span class="number">0</span></span><br><span class="line">  ttl= <span class="number">64</span></span><br><span class="line">  proto= hopopt</span><br><span class="line">  chksum= <span class="literal">None</span></span><br><span class="line">  src= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">  dst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line">  \options\</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>send(packet)</span><br></pre></td></tr></table></figure><img src="/2019/03/28/计算机网络实验——链路层、网络层/IPHeader.jpeg" title="图9 IP包结构"><p>对比scapy中打印的结果和图9中IP包的结构可以看出构造的IP包可以不用填写每一个字段，也就是说可以使用scapy构造不完整甚至有问题的IP数据包在网络中传输。</p><p>在sun使用tcpdump进行抓包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sun</span></span><br><span class="line"><span class="comment"># -i 用于指定接口</span></span><br><span class="line"><span class="comment"># -nn 不进行IP到域名和服务到端口的转换</span></span><br><span class="line">root@70aa710235b6:$ tcpdump -i eth1 -nn</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:10:19.512733 IP 140.252.13.35 &gt; 140.252.13.33:  ip-proto-0 0</span><br><span class="line">14:10:19.512771 IP 140.252.13.33 &gt; 140.252.13.35: ICMP 140.252.13.33 protocol 0 unreachable,length 28</span><br></pre></td></tr></table></figure><p>由于这个IP包没有特定的接收目标，sun端返回了一个协议不可达的ICMP报文。在bsdi端抓取该ICMP报文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = sniff(timeout=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res.summary()</span><br><span class="line">Ether / ARP who has <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> says <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> / Padding</span><br><span class="line">Ether / ARP <span class="keyword">is</span> at <span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span> says <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line">Ether / <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> &gt; <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> hopopt / Padding</span><br><span class="line">Ether / IP / ICMP <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> &gt; <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> dest-unreach protocol-unreachable / IPerror</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res[ICMP][<span class="number">0</span>]</span><br><span class="line">&lt;Ether  dst=<span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span> src=<span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span> type=<span class="number">0x800</span> |</span><br><span class="line">&lt;IP  version=<span class="number">4</span> ihl=<span class="number">5</span> tos=<span class="number">0xc0</span> len=<span class="number">48</span> id=<span class="number">25344</span> flags= frag=<span class="number">0</span> ttl=<span class="number">64</span> proto=icmp chksum=<span class="number">0xe2d0</span> src=<span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> dst=<span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> |</span><br><span class="line">&lt;ICMP  type=dest-unreach code=protocol-unreachable chksum=<span class="number">0xfcfd</span> reserved=<span class="number">0</span> length=<span class="number">0</span> nexthopmtu=<span class="number">0</span> |</span><br><span class="line">&lt;IPerror  version=<span class="number">4</span> ihl=<span class="number">5</span> tos=<span class="number">0x0</span> len=<span class="number">20</span> id=<span class="number">1</span> flags= frag=<span class="number">0</span> ttl=<span class="number">64</span> proto=hopopt chksum=<span class="number">0x46ad</span> src=<span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span> dst=<span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span> |&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>关于ICMP的详细信息将在ICMP实验中进行介绍。</p><h4 id="IP路由选择的实验"><a href="#IP路由选择的实验" class="headerlink" title="IP路由选择的实验"></a>IP路由选择的实验</h4><p>主机选路时的优先级：</p><ol><li>搜索匹配的主机地址；</li><li>搜索匹配的网络地址；</li><li>搜索默认表项（默认表项一般在路由表中被指定为一个网络表项，其网络号为0）。</li></ol><p><strong>TODO:</strong> 这部分内容暂时做不了，但是是很有意义的实验，值得研究。</p><h3 id="ICMP实验"><a href="#ICMP实验" class="headerlink" title="ICMP实验"></a>ICMP实验</h3><p>ICMP全称Internet Control Message Protocol，就是互联网控制报文协议。ICMP报文是封装在IP包里面的，它本身非常简单，通常被IP层或更高层的协议使用（UDP和TCP）。ICMP主要分为查询报文和查询报文,其格式如下图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/7-icmp_packet_format.jpg" title="图10 ICMP报文结构"><h4 id="ICMP地址掩码请求与应答"><a href="#ICMP地址掩码请求与应答" class="headerlink" title="ICMP地址掩码请求与应答"></a>ICMP地址掩码请求与应答</h4><p>ICMP地址掩码请求用于无盘系统在引导过程中获取自己的子网掩码。</p><p>实验过程中发现没有主机会响应该ICMP请求报文，搜索后发现<a href="https://networkengineering.stackexchange.com/a/46589" target="_blank" rel="noopener">stackexchange</a>上的一个答案说该ICMP查询请求已被废弃：</p><blockquote><p><a href="https://tools.ietf.org/html/rfc6918" target="_blank" rel="noopener">RFC 6918</a> deprecates several ICMP types:</p><p>Alternate Host Address (Type 6)<br>Information Request (Type 15)<br>Information Reply (Type 16)<br>Address Mask Request (Type 17)<br>Address Mask Reply (Type 18)<br>Traceroute (Type 30)<br>Datagram Conversion Error (Type 31)<br>Mobile Host Redirect (Type 32)<br>IPv6 Where-Are-You (Type 33)<br>IPv6 I-Am-Here (Type 34)<br>Mobile Registration Request (Type 35)<br>Mobile Registration Reply (Type 36)<br>Domain Name Request (Type 37)<br>Domain Name Reply (Type 38)<br>SKIP (Type 39)<br>Not a straight answer but probably the best you can get.  </p></blockquote><h4 id="ICMP时间戳请求与应答"><a href="#ICMP时间戳请求与应答" class="headerlink" title="ICMP时间戳请求与应答"></a>ICMP时间戳请求与应答</h4><p>报文请求结构如图所示：</p><img src="/2019/03/28/计算机网络实验——链路层、网络层/icmp_timestamp.png" title="图11 ICMP时间戳请求报文与应答"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">主机名</th><th style="text-align:center">接口地址</th></tr></thead><tbody><tr><td style="text-align:center">源主机</td><td style="text-align:center">bsdi</td><td style="text-align:center">140.242.13.35</td></tr><tr><td style="text-align:center">目的主机</td><td style="text-align:center">svr4</td><td style="text-align:center">140.252.13.34</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bsdi</span></span><br><span class="line"><span class="comment"># define a function to get current time</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">getnow</span><span class="params">()</span>:</span></span><br><span class="line">...:     yy, mm, dd, *_ = time.localtime()</span><br><span class="line">...:     <span class="keyword">return</span> int((time.time() - time.mktime((yy, mm, dd, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))) * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send and receive icmp timestamp request and reply</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans, unans = sr(IP(dst=<span class="string">"140.252.13.34"</span>)/ICMP(type=<span class="number">13</span>, ts_ori=getnow()))</span><br><span class="line">Begin emission:</span><br><span class="line">*Finished sending <span class="number">1</span> packets.</span><br><span class="line"></span><br><span class="line">Received <span class="number">1</span> packets, got <span class="number">1</span> answers, remaining <span class="number">0</span> packets</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">&lt;Results: TCP:<span class="number">0</span> UDP:<span class="number">0</span> ICMP:<span class="number">1</span> Other:<span class="number">0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans.summary()</span><br><span class="line">IP / ICMP 140.252.13.35 &gt; 140.252.13.34 timestamp-request 0 ==&gt; IP / ICMP 140.252.13.34 &gt; 140.252.13.35 timestamp-reply 0</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans[<span class="number">0</span>][<span class="number">0</span>].show()</span><br><span class="line"><span class="comment">###[ IP ]###</span></span><br><span class="line">  version= <span class="number">4</span></span><br><span class="line">  ihl= <span class="literal">None</span></span><br><span class="line">  tos= <span class="number">0x0</span></span><br><span class="line">  len= <span class="literal">None</span></span><br><span class="line">  id= <span class="number">1</span></span><br><span class="line">  flags=</span><br><span class="line">  frag= <span class="number">0</span></span><br><span class="line">  ttl= <span class="number">64</span></span><br><span class="line">  proto= icmp</span><br><span class="line">  chksum= <span class="literal">None</span></span><br><span class="line">  src= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">  dst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.34</span></span><br><span class="line">  \options\</span><br><span class="line"><span class="comment">###[ ICMP ]###</span></span><br><span class="line">     type= timestamp-request</span><br><span class="line">     code= <span class="number">0</span></span><br><span class="line">     chksum= <span class="literal">None</span></span><br><span class="line">     id= <span class="number">0x0</span></span><br><span class="line">     seq= <span class="number">0x0</span></span><br><span class="line">     ts_ori= <span class="number">0</span>:<span class="number">52</span>:<span class="number">2.190</span></span><br><span class="line">     ts_rx= <span class="number">15</span>:<span class="number">0</span>:<span class="number">25.317</span></span><br><span class="line">     ts_tx= <span class="number">15</span>:<span class="number">0</span>:<span class="number">25.317</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans[<span class="number">0</span>][<span class="number">1</span>].show()</span><br><span class="line"><span class="comment">###[ IP ]###</span></span><br><span class="line">  version= <span class="number">4</span></span><br><span class="line">  ihl= <span class="number">5</span></span><br><span class="line">  tos= <span class="number">0x0</span></span><br><span class="line">  len= <span class="number">40</span></span><br><span class="line">  id= <span class="number">26909</span></span><br><span class="line">  flags=</span><br><span class="line">  frag= <span class="number">0</span></span><br><span class="line">  ttl= <span class="number">64</span></span><br><span class="line">  proto= icmp</span><br><span class="line">  chksum= <span class="number">0xdd7a</span></span><br><span class="line">  src= <span class="number">140.252</span><span class="number">.13</span><span class="number">.34</span></span><br><span class="line">  dst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">  \options\</span><br><span class="line"><span class="comment">###[ ICMP ]###</span></span><br><span class="line">     type= timestamp-reply</span><br><span class="line">     code= <span class="number">0</span></span><br><span class="line">     chksum= <span class="number">0x541</span></span><br><span class="line">     id= <span class="number">0x0</span></span><br><span class="line">     seq= <span class="number">0x0</span></span><br><span class="line">     ts_ori= <span class="number">0</span>:<span class="number">52</span>:<span class="number">2.190</span></span><br><span class="line">     ts_rx= <span class="number">0</span>:<span class="number">52</span>:<span class="number">2.193</span></span><br><span class="line">     ts_tx= <span class="number">0</span>:<span class="number">52</span>:<span class="number">2.193</span></span><br></pre></td></tr></table></figure><h4 id="ICMP端口不可达报文"><a href="#ICMP端口不可达报文" class="headerlink" title="ICMP端口不可达报文"></a>ICMP端口不可达报文</h4><h4 id="ICMP协议不可达报文"><a href="#ICMP协议不可达报文" class="headerlink" title="ICMP协议不可达报文"></a>ICMP协议不可达报文</h4><p>这个实验同IP层的<strong>bsdi向sun发送数据包</strong>实验，此处只研究返回的ICMP报文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res[ICMP][<span class="number">0</span>].show()</span><br><span class="line"><span class="comment">###[ Ethernet ]###</span></span><br><span class="line">  dst= <span class="number">02</span>:<span class="number">1</span>c:<span class="number">55</span>:<span class="number">0</span>e:bb:<span class="number">87</span></span><br><span class="line">  src= <span class="number">86</span>:<span class="number">43</span>:ab:ea:<span class="number">6</span>e:<span class="number">96</span></span><br><span class="line">  type= <span class="number">0x800</span></span><br><span class="line"><span class="comment">###[ IP ]###</span></span><br><span class="line">     version= <span class="number">4</span></span><br><span class="line">     ihl= <span class="number">5</span></span><br><span class="line">     tos= <span class="number">0xc0</span></span><br><span class="line">     len= <span class="number">48</span></span><br><span class="line">     id= <span class="number">25344</span></span><br><span class="line">     flags=</span><br><span class="line">     frag= <span class="number">0</span></span><br><span class="line">     ttl= <span class="number">64</span></span><br><span class="line">     proto= icmp</span><br><span class="line">     chksum= <span class="number">0xe2d0</span></span><br><span class="line">     src= <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line">     dst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">     \options\</span><br><span class="line"><span class="comment">###[ ICMP ]###</span></span><br><span class="line">        type= dest-unreach</span><br><span class="line">        code= protocol-unreachable</span><br><span class="line">        chksum= <span class="number">0xfcfd</span></span><br><span class="line">        reserved= <span class="number">0</span></span><br><span class="line">        length= <span class="number">0</span></span><br><span class="line">        nexthopmtu= <span class="number">0</span></span><br><span class="line"><span class="comment">###[ IP in ICMP ]###</span></span><br><span class="line">           version= <span class="number">4</span></span><br><span class="line">           ihl= <span class="number">5</span></span><br><span class="line">           tos= <span class="number">0x0</span></span><br><span class="line">           len= <span class="number">20</span></span><br><span class="line">           id= <span class="number">1</span></span><br><span class="line">           flags=</span><br><span class="line">           frag= <span class="number">0</span></span><br><span class="line">           ttl= <span class="number">64</span></span><br><span class="line">           proto= hopopt</span><br><span class="line">           chksum= <span class="number">0x46ad</span></span><br><span class="line">           src= <span class="number">140.252</span><span class="number">.13</span><span class="number">.35</span></span><br><span class="line">           dst= <span class="number">140.252</span><span class="number">.13</span><span class="number">.33</span></span><br><span class="line">           \options\</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;实验主要来源于Rechard Stevens 的《TCP/IP illustrated》（《TCP/IP 详解》）卷一和刘超老师的极客时间专
      
    
    </summary>
    
    
      <category term="python" scheme="https://callmexss.github.io/tags/python/"/>
    
      <category term="计算机网络" scheme="https://callmexss.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="scapy" scheme="https://callmexss.github.io/tags/scapy/"/>
    
      <category term="tcpdump" scheme="https://callmexss.github.io/tags/tcpdump/"/>
    
      <category term="docker" scheme="https://callmexss.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux生存指南</title>
    <link href="https://callmexss.github.io/2018/10/13/Linux%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97/"/>
    <id>https://callmexss.github.io/2018/10/13/Linux生存指南/</id>
    <published>2018-10-13T12:43:41.000Z</published>
    <updated>2019-03-28T13:35:20.955Z</updated>
    
    <content type="html"><![CDATA[<p>使用linux过程中最基本、最常用的命令、工具记录。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li>ls - List directory contenets</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有文件，包括隐藏文件</span></span><br><span class="line">ls -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以详细信息显示所有文件，搭配 -a 显示所有文件的详细信息</span></span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以人类可读的文件大小显示文件</span></span><br><span class="line">ls -lh</span><br></pre></td></tr></table></figure><ul><li>cd - Change current working directory</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到指定文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到当前用户的家目录</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到之前的目录</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><ul><li>mkdir - Create a directory</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件夹</span></span><br><span class="line">mkdir directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的创建目录</span></span><br><span class="line">mkdir -p /path/to/directory</span><br></pre></td></tr></table></figure><ul><li>rm - Remove files or directoreis</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：使用rm删除的文件（夹）无法还原</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rm filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归删除文件夹</span></span><br><span class="line">rm -r folder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除一个文件夹(慎用)</span></span><br><span class="line">rm -rf folder</span><br></pre></td></tr></table></figure><ul><li>mv - Move or rename files and directories</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -v for verbose, -i for interactive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件（夹）</span></span><br><span class="line">mv name1 name2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件（夹）</span></span><br><span class="line">mv /path/from/name /path/to/name</span><br></pre></td></tr></table></figure><ul><li>cp - Copy files or folders</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -r for recursively, -v for verbose, -i for interactive, name can be changed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件（夹）</span></span><br><span class="line">cp /path/from/name /path/to/name</span><br></pre></td></tr></table></figure><ul><li>cat - Print and concatenate files</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示文件内容</span></span><br><span class="line">cat filename</span><br></pre></td></tr></table></figure><ul><li>adduser - User addition utility</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新用户，并创建默认的用户家目录，提示用户设置密码</span></span><br><span class="line">adduser username</span><br><span class="line"></span><br><span class="line"><span class="comment"># useradd username 只创建一个用户，别的啥都不干</span></span><br></pre></td></tr></table></figure><ul><li>usermod - Modifies a user account.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将一个用户添加到sudo组</span></span><br><span class="line">usermod -aG sudo user <span class="comment"># 其中a:表示添加，G：指定组名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户从sudo组移除</span></span><br><span class="line">usermod -G group user</span><br></pre></td></tr></table></figure><ul><li>chown - Change user and group ownership of files and folders.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改变 file/folder 的所有者:</span></span><br><span class="line">    chown user path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变 file/folder 的所有者和组:</span></span><br><span class="line">    chown user:group path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归的改变所有者:</span></span><br><span class="line">    chown -R user path/to/folder</span><br></pre></td></tr></table></figure><ul><li>chmod - Change the access permissions of a file or directory.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定拥有文件的 [u]ser 执行文件的权限:</span></span><br><span class="line">    chmod u+x file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予文件执行的权限</span></span><br><span class="line">    chmod +x file</span><br></pre></td></tr></table></figure><h3 id="高阶命令"><a href="#高阶命令" class="headerlink" title="高阶命令"></a>高阶命令</h3><ul><li>find - Find files or directories under the given directory tree, recursively.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据名称查找文件，支持正则表达式</span></span><br><span class="line">find path -name given_name</span><br></pre></td></tr></table></figure><ul><li>grep -  Matches patterns in input text</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前目录下的所有包含py的文件</span></span><br><span class="line">ls -al | grep py</span><br></pre></td></tr></table></figure><ul><li>ps - Information about running processes.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Search for a process that matches a string</span></span><br><span class="line">ps aux | grep string</span><br></pre></td></tr></table></figure><ul><li>kill - Sends a signal to a process, usually related to stopping the process.</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死一个进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure><ul><li>管道: |;  重定向: &gt; &gt;&gt;; 通配符: * ? [] . ^ $</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道将上一个命令的输出作为下一条目录的输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取passwd文件里和root有关的内容</span></span><br><span class="line">cat /etc/passwd | grep root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向: &gt; 覆盖; &gt;&gt; 追加</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; <span class="built_in">test</span></span><br><span class="line">$ cat <span class="built_in">test</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"world"</span> &gt; <span class="built_in">test</span></span><br><span class="line">$ cat <span class="built_in">test</span></span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"hello"</span> &gt;&gt; <span class="built_in">test</span></span><br><span class="line">$ cat <span class="built_in">test</span></span><br><span class="line">world</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符</span></span><br><span class="line"><span class="comment"># *  任意字符任意次</span></span><br><span class="line"><span class="comment"># ?  任意字符一次</span></span><br><span class="line"><span class="comment"># [] 可匹配字符在的任意一个</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="创建用户并添加到sudo用户组"><a href="#创建用户并添加到sudo用户组" class="headerlink" title="创建用户并添加到sudo用户组"></a>创建用户并添加到sudo用户组</h3><h4 id="创建用户及其目录"><a href="#创建用户及其目录" class="headerlink" title="创建用户及其目录"></a>创建用户及其目录</h4><p>创建一个用户jc 这个用户只能在/home/jc上面增加删除文件， jc不能在其他目录加减文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/jc -m jc</span><br><span class="line">passwd jc</span><br><span class="line">chown jc -R /home/jc</span><br><span class="line"></span><br><span class="line"><span class="comment"># adduser 也可以</span></span><br></pre></td></tr></table></figure><h4 id="将用户添加到sudo目录"><a href="#将用户添加到sudo目录" class="headerlink" title="将用户添加到sudo目录"></a>将用户添加到sudo目录</h4><p>通过命令： id username<br>来查看用户信息</p><p>安装ubuntu时，创建了一个普通用户，没有sudo权限，执行sudo相关命令失败，原因该普通用户没有加到超级用户组，</p><p>使用如下命令可以添加到用户组（也可是超级用户组）。</p><p>命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG sudo username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中a:表示添加，G：指定组名</span></span><br></pre></td></tr></table></figure><h3 id="远程登录和复制文件"><a href="#远程登录和复制文件" class="headerlink" title="远程登录和复制文件"></a>远程登录和复制文件</h3><h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><ul><li>远程登录即通过 SSH 客户端链接运行了 SSH 服务器的远程机器上。</li><li>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。<ul><li>有效防止远程管理过程中的信息泄露。</li><li>对所有传输的数据进行加密，也能防止 DNS 欺骗和 IP 欺骗。</li></ul></li><li>SSH 客户端是一种使用 Secure Shell 协议连接到远程计算机的软件程序。</li><li>SSH 客户端简单使用访问服务器：ssh [-p port] user@remote<ul><li>user 是远程机器上的用户名。</li><li>remote 是远程机器地址，可为 IP、域名或别名。</li><li>port 是 SSH 服务器监听的端口，若不指定端口默认为 22。</li></ul></li></ul><h4 id="远程复制文件"><a href="#远程复制文件" class="headerlink" title="远程复制文件"></a>远程复制文件</h4><p>SCP 即 Secure Copy，是一个在 Linux 下用来进行 远程拷贝文件 的命令。</p><h5 id="从本地复制文件到远程机器桌面上"><a href="#从本地复制文件到远程机器桌面上" class="headerlink" title="从本地复制文件到远程机器桌面上"></a>从本地复制文件到远程机器桌面上</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P sample.py user@remote:Desktop/sample.py</span><br></pre></td></tr></table></figure><h5 id="从远程机器桌面上复制文件夹到本地上"><a href="#从远程机器桌面上复制文件夹到本地上" class="headerlink" title="从远程机器桌面上复制文件夹到本地上"></a>从远程机器桌面上复制文件夹到本地上</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P port -r user@remote:Desktop/sample ~/Desktop/sample</span><br></pre></td></tr></table></figure><h3 id="ssh-高级用法"><a href="#ssh-高级用法" class="headerlink" title="ssh 高级用法"></a>ssh 高级用法</h3><h4 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h4><p>免密码登录：即客户端访问服务端时，需要密码验证身份登录。</p><ul><li>Step.01. 配置公钥：执行 ssh-keygen 即生成 SSH 密钥。</li><li>Step.02. 上传公钥到服务器：执行 ssh-copy-id -p port user@remote，让远程服务器记住我们的 公钥。可能需要使用 -i 指定公钥位置：ssh-copy-id -i ~/.ssh/id_rsa.pub user@remote.</li></ul><blockquote><p>1) 有关 SSH 配置信息都保存在 /Home/yousr username/.ssh 目录下。<br>2) 免密登录使用的是非对称加密算法 ( RSA )，即使用公钥加密的数据，需要使用私钥解密；使用私钥加密的数据，需要使用公钥解密。</p></blockquote><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><p>配置别名：每次输入 ssh -p port user@remote 是非常繁琐重复的工作，配置别名的方式以替代上述这么一串命令代码。</p><ul><li>在 /.ssh/config 文件下追加以下内容 ( 需建立 Config 文件 )：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host mac</span><br><span class="line">HostName 192.168.10.1</span><br><span class="line">User user</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure><p>命令输入 ssh mac 即可实现远程登录操作 ( SCP 同样原理 )。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 -r ~/Desktop/Sample mac:Desktop/Sample</span><br></pre></td></tr></table></figure><h2 id="shell-相关操作"><a href="#shell-相关操作" class="headerlink" title="shell 相关操作"></a>shell 相关操作</h2><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><h3 id="fish"><a href="#fish" class="headerlink" title="fish"></a><a href="http://fishshell.com/" target="_blank" rel="noopener">fish</a></h3><p><a href="https://github.com/fish-shell/fish-shell" target="_blank" rel="noopener">github-repository</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>ubuntu</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install fish</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置非常方便，先在命令行中输入<code>fish</code>切换shell为<code>fish</code>，然后图形界面下会显示一个http的链接，点击进入该链接进行相应配置即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure><img src="/2018/10/13/Linux生存指南/fish_config.png"><p>基本上<code>fish</code>是一个开箱即用的shell，几乎不进行配置即可使用，但是<code>fish</code>和<code>bash</code>不兼容，所以稍加配置的<code>zsh</code>是更好的选择。</p><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><h3 id="xonsh"><a href="#xonsh" class="headerlink" title="xonsh"></a>xonsh</h3><h2 id="git-相关操作"><a href="#git-相关操作" class="headerlink" title="git 相关操作"></a>git 相关操作</h2><h3 id="git-新建仓库并推送到远程分支"><a href="#git-新建仓库并推送到远程分支" class="headerlink" title="git 新建仓库并推送到远程分支"></a>git 新建仓库并推送到远程分支</h3><p>问题描述：在github上新建了仓库，如何将本地仓库推送到远程仓库?</p><p>解决方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"# repository name"</span> &gt;&gt; README.md</span><br><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git add README.md <span class="comment"># add the README.md file</span></span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:username/repository_name.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>git 远程仓库相关的常用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出每一个指定的远程服务器简写</span></span><br><span class="line">$ git remote</span><br><span class="line">origin <span class="comment"># git 给每个仓库初始的简写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示读写仓库使用的简写和其对应的&lt;url&gt;</span></span><br><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/schacon/ticgit (fetch)</span><br><span class="line">origin https://github.com/schacon/ticgit (push)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个新的远程 Git 仓库，同时指定仓库&lt;url&gt;为一个你可以轻松引用的简写&lt;shortname&gt;。</span></span><br><span class="line"><span class="comment"># git remote add &lt;shortname&gt; &lt;url&gt;</span></span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote add pb https://github.com/paulboone/ticgit</span><br><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/schacon/ticgit (fetch)</span><br><span class="line">origin https://github.com/schacon/ticgit (push)</span><br><span class="line">pb https://github.com/paulboone/ticgit (fetch)</span><br><span class="line">pb https://github.com/paulboone/ticgit (push)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库抓取和拉取</span></span><br><span class="line"><span class="comment"># git fetch [remote-name]</span></span><br><span class="line">$ git fetch origin <span class="comment"># git fetch 不会自动合并或修改当前的工作</span></span><br><span class="line">$ git pull <span class="comment"># 抓取数据并自动尝试合并</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">$ git remote show origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名远程仓库</span></span><br><span class="line">$ git remote rename pb paul</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">paul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line">$ git remote rm paul</span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><h2 id="工具部分"><a href="#工具部分" class="headerlink" title="工具部分"></a>工具部分</h2><h3 id="命令行辅助"><a href="#命令行辅助" class="headerlink" title="命令行辅助"></a>命令行辅助</h3><h4 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a><a href="http://tldr-pages.github.io/" target="_blank" rel="noopener">tldr</a></h4><p><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">github-repository</a></p><blockquote><p>A collection of simplified and community-driven man pages.</p></blockquote><img src="/2018/10/13/Linux生存指南/tldr.png"><p><code>github</code>主页提供了多种客户端实现，这里介绍<code>python</code>和<code>c++</code>客户端：</p><ul><li>python</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tldr-python-client: pip install tldr</span><br><span class="line">tldr.py: pip install tldr.py</span><br></pre></td></tr></table></figure><p><code>python</code>客户端安装简易，但是性能好像有些问题，查询速度很慢。</p><ul><li>c++</li></ul><p><code>c++</code>客户端通过源码编译的方式进行安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tldr-pages/tldr-cpp-client.git tldr-c-client</span><br><span class="line"><span class="built_in">cd</span> tldr-c-client</span><br><span class="line"></span><br><span class="line">./deps.sh           <span class="comment"># install dependencies</span></span><br><span class="line">make                <span class="comment"># build tldr</span></span><br><span class="line">make install        <span class="comment"># install tldr</span></span><br></pre></td></tr></table></figure><p>性能很棒。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u011774239/article/details/48463393" target="_blank" rel="noopener">1. ubuntu下给用户添加sudo权限，并且如何取消sudo权限</a>  </p><p><a href="http://blog.sina.com.cn/s/blog_47051c800100oegn.html" target="_blank" rel="noopener">2. linux下创建用户并且限定用户主目录</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用linux过程中最基本、最常用的命令、工具记录。&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; c
      
    
    </summary>
    
    
      <category term="linux" scheme="https://callmexss.github.io/tags/linux/"/>
    
      <category term="git" scheme="https://callmexss.github.io/tags/git/"/>
    
      <category term="bash" scheme="https://callmexss.github.io/tags/bash/"/>
    
      <category term="xonsh" scheme="https://callmexss.github.io/tags/xonsh/"/>
    
      <category term="zsh" scheme="https://callmexss.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统（一）——计算机系统漫游</title>
    <link href="https://callmexss.github.io/2018/09/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/"/>
    <id>https://callmexss.github.io/2018/09/27/深入理解计算机系统（一）——计算机系统漫游/</id>
    <published>2018-09-27T13:12:02.000Z</published>
    <updated>2019-03-29T11:17:14.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>系统中的所有信息——包括磁盘文件、内存中的程序和用户数据以及网络中传输的数据，都是由一串比特表示的。</p></blockquote><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>编译系统由四部分组成：</p><ul><li>预处理器</li><li>编译器</li><li>汇编器</li><li>连接器</li></ul><h2 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h2><ol><li><p>总线</p><p> 贯穿整个系统的是<strong>一组电子管道</strong>，称作总线，它携带信息字节并负责在各个部件间传递。通常总线被设计成传送<strong>定长</strong>的字节快，也就是<strong>字(word)</strong>。字中的字节数（即字长）是一个基本的系统参数，各个系统中都不尽相同。</p></li><li><p>I/O 设备</p><p> I/O设备是系统与外部世界联系的通道。每个I/O设备都通过一个 <strong>控制器</strong> 或者 <strong>适配器</strong> 与I/O总线相连。区别主要在它们的封装方式。控制器是I/O设备本身或者主板上的芯片组。而适配器则是一块插在主板插槽上的卡。它们的功能都是 <strong>在I/O总线和I/O设备间传递信息</strong>。</p></li><li><p>主存</p><p> 主存是一个临时的存储设备，在处理器执行程序时，用来 <strong>存放程序和程序处理的数据</strong>。也就是说，当一个程序在运行时，首先会将自身加载到内存中去。从 <strong>物理上来讲</strong> ，主存是由一组动态随机存储器（DRAM）芯片组成的。从 <strong>逻辑上讲</strong> ，存储器是一个线性的字节数组，每个字节都有其唯一的地址（数组索引），这些地址是从零开始的。</p></li><li><p>处理器</p><p> 中央处理单元（CPU），简称处理器，是解释（或执行）存储在主存中指令的引擎。处理器的核心是大小为一个字的存储设备（或寄存器），称为程序计数器（PC）。在任何时刻，PC都指向主存中的某条机器语言指令（即含有该条指令的地址）。<br> 从系统通电开始，直到系统断电，处理器一直在不断地执行程序计数器指向的指令，再更新程序计数器，使其指向下一条指令。处理器从程序计数器指向的内存中读取指令，解释指令中的位，执行该指令指示的简单操作，然后更新PC，使其指向下一条指令，这条指令并不一定和在内存中刚刚执行的指令相邻。他们围绕着 <strong>主存、寄存器文件（register file）和算数/逻辑单元（ALU）进行。</strong> 寄存器文件是一个小的存储设备，由一些单个字长的寄存器组成，每个寄存器都有唯一的名字。ALU计算新的数据和地址值。下面是一些简单操作的例子，CPU在指令的要求下可能会执行这些操作。</p><ul><li>加载：主存 ——&gt; 寄存器，覆盖寄存器原来的内容。</li><li>存储：寄存器 ——&gt; 主存，覆盖这个地址上原来的内容。</li><li>操作：把两个寄存器的内容复制到ALU，ALU对这两个字做算术运算，并将结果放到一个寄存器中，覆盖该寄存器中原来的内容。</li><li>跳转：从指令本身中抽取一个字，并将这个字复制到程序计数器（PC）中，以覆盖（PC）中原来的值。</li></ul></li></ol><h2 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h2><p>系统花费了大量时间把信息从一个地方搬到另一个地方。</p><p><strong>局部性原理</strong>：程序具有访问局部区域里的数据和代码的趋势。</p><p>意识到高速缓存存储器存在的应用程序员能够利用告诉缓存将程序的性能提高一个数量级。</p><p>在处理器和一个较大较慢的设备（例如主存）间插入一个更小更快的存储设备（例如高速缓存）的想法已经称为一个普遍的观念。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>操作系统可以被视作应用程序和底层硬件间的一层软件。所有应用程序对硬件的尝试都必须经过操作系统。</p><p>操作系统有两个基本功能：（1）防止硬件被失控的应用程序滥用;（2）向应用程序提供简单一致的机制来控制复杂而通常又大不相同的低级硬件设备。操作系统通过几个基本的抽象概念（ <strong>进程、虚拟内存和文件</strong> ）来实现这两个功能。文件是对I/O设备的抽象表示，虚拟内存是对主存和磁盘I/O设备的抽象表示，进程则是对处理器、主存和I/O设备的抽象表示。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是操作系统对一个正在运行的程序的一种抽象。</p><p>操作系统中进程交错执行的机制称为上下文切换。 <strong>上下文切换</strong>是指操作系统保存当前进程上下文（PC和寄存器文件的当前值，以及主存中的内容）、恢复新进程的上下文，然后将控制权传递给新进程，新进程就会从它上传停止的地方开始。</p><p>内核不是一个独立的进程，相反它是系统管理全部进程所用代码和数据结构的集合。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>一个进程实际上由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>虚拟内存是一个抽象概念，它为每个进程提供了一个假象，即每个进程都在独占的使用主存。每个进程看到的内存都是一致的，称为虚拟地址空间。</p><p>每个进程看到的虚拟地址空间由大量准确定义的区构成，每个区都有专门的功能。</p><p>虚拟内存的运作需要硬件和操作系统之间精密复杂的交互，包括对处理器生成的每个地址的硬件翻译。基本思想是把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件就是字节序列，仅此而已。每个I/O设备，包括磁盘、键盘、显示器，甚至网络，都可以看成是文件。系统中的所有输入输出都是通过使用一小组称为Unix I/O的系统函数调用读写文件来实现的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;系统中的所有信息——包括磁盘文件、内存中的程序和用户数据以及网络中传输的数据，都是由一串比特表示的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;编译系统&quot;&gt;&lt;a href=&quot;#编译系统&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gdb教程「翻译」</title>
    <link href="https://callmexss.github.io/2018/09/22/gdb%E6%95%99%E7%A8%8B/"/>
    <id>https://callmexss.github.io/2018/09/22/gdb教程/</id>
    <published>2018-09-22T02:09:15.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文<a href="https://www.cs.cmu.edu/~gilpin/tutorial/" target="_blank" rel="noopener">Debugging Under Unix: gdb Tutorial</a></p></blockquote><p><strong>在Unix 下调试： gdb 教程</strong></p><p>因为最近做了一个项目需要在linux环境下编译c++程序，于是把源码迁移到了Ubuntu，然后发现在修改了代码后程序报了Segment Fault的错误。这不通过调试只是静态分析怎么可能找到，于是被逼无奈又只能谷歌大法搜呗…于是就搜到了这篇04年的教程。gdb我之前好奇用了一次，但是完全不知所以，这次跟着这篇教程却算是顺利的入了门。虽然最终bug不是通过gdb找到的，不过为了纪念，还是准备把这篇我认为还不错的教程翻译下来留作纪念。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本教程最初是为华盛顿大学 CS 342 而撰写。它现在仍旧由 Andrew Gilpin 进行维护。</p><h3 id="写给谁看？"><a href="#写给谁看？" class="headerlink" title="写给谁看？"></a>写给谁看？</h3><p>本教程旨在帮助新接触UNIX环境的程序员学习使用gdb调试器。本教程假设你已经能够使用C++编写程序并知道如何编译运行。它还假设你了解关于调试的基础知识，并在其它操作系统中使用过调试器。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>为了阐述调试的原理，我将使用一个有bug的程序作为例子。在你读完本教程后，你将能够使用调试器定位和修复代码中的错误。代码在<a href="https://www.cs.cmu.edu/~gilpin/tutorial/main.cc" target="_blank" rel="noopener">这里</a>下载，以及一个简单的<a href="https://www.cs.cmu.edu/~gilpin/tutorial/Makefile" target="_blank" rel="noopener">Makefile</a>。</p><p>代码非常简单，包含一个节点和一个链表的定义。这也是测试列表的一个简单开始。为了能够更容易的阐述调试的过程，所有的代码被放在了一个文件中。</p><p><strong>注意:</strong> 由于代码比较久远，其中有一些需要修改的地方，一份<a href="https://raw.githubusercontent.com/callmexss/callmexss.github.io/blog/source/_posts/gdb%E6%95%99%E7%A8%8B/main.cc" target="_blank" rel="noopener">修改后的代码</a>放到github仓库中了。Makefile比较短，贴在这里学习一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CXX = g++ <span class="comment"># 指定编译器</span></span><br><span class="line">FLAGS = -ggdb -Wall <span class="comment"># 使用调试模式</span></span><br><span class="line"></span><br><span class="line">main: main.cc <span class="comment"># 函数入口点</span></span><br><span class="line">  <span class="variable">$&#123;CXX&#125;</span> <span class="variable">$&#123;FLAGS&#125;</span> -o main main.cc <span class="comment"># 编译命令</span></span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">  rm -f main <span class="comment"># 删除链接文件</span></span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>gdb包含在CEC（没查到是什么…）机器的GNU包中。如果你没有加载这个包，在命令行输入<code>pkgadd gnu</code>。如果你可以运行g++，那么你就可以运行gdb。（没有gdb环境的使用包管理工具安装一下。）</p><h3 id="调试符号"><a href="#调试符号" class="headerlink" title="调试符号"></a>调试符号</h3><p>gdb只能作用于由g++产生的调试符号。对于SUN CC的用户，有一个和gdb很相似的替代品叫做dbx调试器。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="什么时候该使用调试器"><a href="#什么时候该使用调试器" class="headerlink" title="什么时候该使用调试器"></a>什么时候该使用调试器</h3><p>调试是编程过程中不可避免的。每一个程序员在他们的编程生涯中都将会有某个时刻需要使用调试器调试一段代码。有许多调试的方法，从在屏幕上打印信息，到使用调试器，或者只是思考程序在干什么，并对问题是什么进行有根据的猜测。修复一个bug前，必须先定位bug的位置。例如，在段错误中，知道在哪一行产生段错误是非常有用的。一旦出问题的代码被找到了，知道那个方法中的数值、谁调用了那个方法、以及为什么这个错误会发生都将是有帮助的。使用调试器会使找到这些信息变得十分简单。</p><p>继续阅读本教程并使用make编译以及运行这个程序。本程序将会打印出一些信息，然后会打印它出现了一个段错误，导致程序崩溃。仅根据屏幕上显示的信息，几乎不可能找到程序崩溃的原因，更不用说修复这个程序了。我们现在将开始调试这个程序。</p><h3 id="加载程序"><a href="#加载程序" class="headerlink" title="加载程序"></a>加载程序</h3><p>现在你有一个了一个可执行文件（本例中是main）然后你想调试它。首先你必须运行调试器，调试器叫做gdb，你必须在命令行中告诉他你想要调试哪一个程序。所以为了调试我们输入 <code>gdb main</code> 。这里是运行后可能出现的样子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">agg1@sukhoi agg1/.www-docs/tutorial&gt; gdb main</span><br><span class="line">GNU gdb 4.18</span><br><span class="line">Copyright 1998 Free Software Foundation, Inc.</span><br><span class="line">GDB is free software, covered by the GNU General Public License, and you are</span><br><span class="line">welcome to change it and/or distribute copies of it under certain conditions.</span><br><span class="line">Type <span class="string">"show copying"</span> to see the conditions.</span><br><span class="line">There is absolutely no warranty <span class="keyword">for</span> GDB.  Type <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"sparc-sun-solaris2.7"</span>...</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>一段关于emacs的内容就跳过了。</p><p>gdb 现在等着接收用户指令。我们需要运行程序，这样gdb可以帮助我们观察程序崩溃时到底发生了什么。在gdb命令行中输入 <code>run</code>。这里是输入 <code>run</code> 后发生的事情：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/cec/s/a/agg1/.www-docs/tutorial/main</span><br><span class="line">Creating Node, 1 are <span class="keyword">in</span> existence right now</span><br><span class="line">Creating Node, 2 are <span class="keyword">in</span> existence right now</span><br><span class="line">Creating Node, 3 are <span class="keyword">in</span> existence right now</span><br><span class="line">Creating Node, 4 are <span class="keyword">in</span> existence right now</span><br><span class="line">The fully created list is:</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Now removing elements:</span><br><span class="line">Creating Node, 5 are <span class="keyword">in</span> existence right now</span><br><span class="line">Destroying Node, 4 are <span class="keyword">in</span> existence right now</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">Node&lt;int&gt;::next (this=0x0) at main.cc:28</span><br><span class="line">28  Node&lt;T&gt;* next () const &#123; <span class="built_in">return</span> next_; &#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>程序崩溃了，让我们来看看从输入结果中我们能收集到哪些信息。</p><p><strong>注意：</strong> 调试的程序一定是编译好的二进制文件。</p><h3 id="检查崩溃"><a href="#检查崩溃" class="headerlink" title="检查崩溃"></a>检查崩溃</h3><p>我们现在可以看到程序在main.cc的第28行，<code>this</code>指针指向0，这行代码正在被执行。但我们还想知道是谁调用了这个方法，以及调用方法中的值是什么,所以在gdb命令行中输入<code>backtrace</code>,得到如下输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) backtrace</span><br><span class="line"><span class="comment">#0  Node&lt;int&gt;::next (this=0x0) at main.cc:28</span></span><br><span class="line"><span class="comment">#1  0x2a16c in LinkedList&lt;int&gt;::remove (this=0x40160,</span></span><br><span class="line">    item_to_remove=@0xffbef014) at main.cc:77</span><br><span class="line"><span class="comment">#2  0x1ad10 in main (argc=1, argv=0xffbef0a4) at main.cc:111</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>所以除了当前方法和局部变量外，我们还可以知道哪些方法调用了我们以及它们的参数是什么。例如，我们可以看出当前方法是由<code>LinkedList&lt;int&gt;::remove()</code>调用，参数<code>item_to_remove</code>在内存中的地址为<code>0xffbef014</code>。知道<code>item_to_remove</code>的值或许有助于我们理解bug,所以我们想要看到<code>item_to_remove</code>的地址中的值。可以通过使用<code>x + address</code>输入到命令行中查看该变量的值(x可以被理解为examine的简写)。这是输入后的效果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x 0xffbef014</span><br><span class="line">0xffbef014: 0x00000001</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>所以程序实在调用<code>LinkedList&lt;int&gt;::remove</code>方法以及参数为1时崩溃的。我们现在把问题缩小到了一个特定的方法和一个特定的参数。</p><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>既然我们已经知道了段错误何时在何处发生，我们想要知道程序在崩溃以前发生了什么。一种方法是使用逐步运行，一次一步,执行程序的全部语句直到执行到我们想要看到的地方。这是有效的，但有时你希望它恰好运行到特定的位置并在那里停止，这样你就可以检测此时的数据。</p><p>如果你曾经使用过调试器，那么你或许对断点的概念很熟悉。简单来说，断点就是调试器在源码中应该停止执行的那一行。我们的例子中，我们想要查看<code>LinkedList&lt;int&gt;::remove ()</code>中的代码，所以我们想要在main.cc的第52行中设置断点。因为你可能不知道具体的行号，你也可以告诉调试器你想要设置断点的方法。这是在本例中我们的输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">break</span> LinkedList&lt;int&gt;::remove</span><br><span class="line">Breakpoint 1 at 0x29fa0: file main.cc, line 52.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>现在断点就如我们所期望的被设置在了main.cc的52行。(断点绑定了一个编号是为了我们之后可以引用它，例如删除这个断点。)每次程序运行时，它会在每次运行到第52行的时候将控制权交还给调试器。当方法会被调用多次但是只会在某个特定的值触发错误时，这样就不优雅了。在本例中，我们知道当参数为1时调用<code>LinkedList&lt;int&gt;::remove()</code>方法会导致程序崩溃。所以我们或许想要告诉调试器在<code>item_to_remove</code>值为1时中断。这可以通过如下命令实现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) condition 1 item_to_remove==1</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>这等同于告诉调试器“只有在<code>item_to_remove</code>值为1时中断。”现在我们可以运行程序，然后看到调试器只有会在某个特定条件为真时进入断点。</p><h3 id="单步运行"><a href="#单步运行" class="headerlink" title="单步运行"></a>单步运行</h3><p>继续上面的例子，我们现在已经设置了一个条件断点，然后让程序每次运行一步，看是否能够定位错误的源头。可以通过<code>step</code>命令完成这个过程。gdb有一个很棒的特性，不输入命令直接按下回车时，会自动执行上一条命令。也就是说，在第一次输入<code>step</code>后我们就可以通过敲击回车让调试器继续执行<code>step</code>命令了。这看起来就像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint 1, LinkedList&lt;int&gt;::remove (this=0x40160,</span><br><span class="line">    item_to_remove=@0xffbef014) at main.cc:52</span><br><span class="line">52     Node&lt;T&gt; *marker = head_;</span><br><span class="line">(gdb) step</span><br><span class="line">53      Node&lt;T&gt; *temp = 0;  // temp points to one behind as we iterate</span><br><span class="line">(gdb)</span><br><span class="line">55      <span class="keyword">while</span> (marker != 0) &#123;</span><br><span class="line">(gdb)</span><br><span class="line">56        <span class="keyword">if</span> (marker-&gt;value() == item_to_remove) &#123;</span><br><span class="line">(gdb)</span><br><span class="line">Node&lt;int&gt;::value (this=0x401b0) at main.cc:30</span><br><span class="line">30    const T&amp; value () const &#123; <span class="built_in">return</span> value_; &#125;</span><br><span class="line">(gdb)</span><br><span class="line">LinkedList&lt;int&gt;::remove (this=0x40160, item_to_remove=@0xffbef014)</span><br><span class="line">    at main.cc:75</span><br><span class="line">75        marker = 0;  // reset the marker</span><br><span class="line">(gdb)</span><br><span class="line">76        temp = marker;</span><br><span class="line">(gdb)</span><br><span class="line">77        marker = marker-&gt;next();</span><br><span class="line">(gdb)</span><br><span class="line">Node&lt;int&gt;::next (this=0x0) at main.cc:28</span><br><span class="line">28    Node&lt;T&gt;* next () const &#123; <span class="built_in">return</span> next_; &#125;</span><br><span class="line">(gdb)</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">Node&lt;int&gt;::next (this=0x0) at main.cc:28</span><br><span class="line">28    Node&lt;T&gt;* next () const &#123; <span class="built_in">return</span> next_; &#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>在键入<code>run</code>后，gdb问我们是否要重新运行程序，我们选择是。然后程序会运行并在我们期望的位置中断。我们输入<code>step</code>和敲击回车使程序单步运行。注意程序会进入到调用的方法中。如果你不希望这样，使用<code>next</code>方法，它会将函数的调用视为一步执行。</p><p>程序的错误很明显了。在第75行<code>marker</code>被置为0,但是在第77行<code>marker</code>的一个成员被访问，<strong>访问没有初始化的对象是危险的</strong>。因为程序不能方位地址为0的内存，所以段错误发生了。在这个例子中，在本例中，<code>marker</code>并不用做什么，可以简单的通过移除main.cc的第75行来避免这个错误。</p><p>如果你观察程序的输入，你会发现程序会先正常运行一段时间，但是程序中某处会产生内存泄漏。（提示：它就在<code>LinkedList&lt;T&gt;::remove()</code>方法里，某次remove没有正常工作时产生）。这将给读者留作使用调试器定位和修复bug的练习。（我总是喜欢这么说.;）</p><p>gdb通过输入<code>quit</code>退出。</p><h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><p>本文档只涉及使用gdb的最小知识。可以通过gdb的manpage或者看<a href="http://sources.redhat.com/gdb/current/onlinedocs/gdb_toc.html" target="_blank" rel="noopener">这份非常长的关于gdb的介绍</a>可以通过在运行gdb时输入<code>help</code>获取在线命令。此外，一如往常，欢迎在新闻组里提问或者在工作时间来问我。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>上面链表的代码中还有一个未被提到的错误。这个错误在按照原始代码中的顺序添加和移除元素时不会发生，但是在其它顺序下会产生。例如，插入1，2，3，和 4，然后尝试删除2时会产生。非常感谢Linda Gu 和 Xiaofeng Chen发现这个错误。这个bug的修复非常简单，也一并留作额外练习。</li><li>特别鸣谢Ximmbo da Jazz修复了一些错别字和错误的输出。</li><li>特别鸣谢Raghuprasad Govindarao发现了损坏的链接。</li></ul><hr><p>请将评论，建议和错误报告发送给<a href="mailto:gilpin@cs.cmu.edu" target="_blank" rel="noopener">Andrew Gilpin</a>。<br>页面最后修改时间：2004年4月7日</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文&lt;a href=&quot;https://www.cs.cmu.edu/~gilpin/tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Debugging Under Unix: gdb Tutorial&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="翻译" scheme="https://callmexss.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="gdb" scheme="https://callmexss.github.io/tags/gdb/"/>
    
      <category term="debug" scheme="https://callmexss.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>vckpg 使用小记</title>
    <link href="https://callmexss.github.io/2017/12/14/vckpg-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://callmexss.github.io/2017/12/14/vckpg-使用小记/</id>
    <published>2017-12-14T08:06:57.000Z</published>
    <updated>2019-03-28T13:35:20.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vcpkg介绍"><a href="#vcpkg介绍" class="headerlink" title="vcpkg介绍"></a>vcpkg介绍</h2><p>先把官方仓库的连接撂在<a href="https://github.com/Microsoft/vcpkg" target="_blank" rel="noopener">这里</a> 。</p><h3 id="一个来自官方仓库的概述"><a href="#一个来自官方仓库的概述" class="headerlink" title="一个来自官方仓库的概述"></a>一个来自官方仓库的概述</h3><blockquote><p>Vcpkg helps you get C and C++ libraries on Windows. This tool and ecosystem are currently in a preview state; your involvement is vital to its success.</p><p>For short description of available commands, run <code>vcpkg help</code>.</p></blockquote><p>总而言之，vcpkg可以看做Windows下C和C++的包管理工具，使用它可以方便的安装和使用<strong>常用</strong>的C、C++库。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>系统要求：</p><ul><li>Windows 10, 8.1, or 7</li><li>Visual Studio 2017 or Visual Studio 2015 Update 3</li><li>Git</li><li><em>Optional: CMake 3.10.0</em>  // 可选</li></ul><p>clone项目到本地，执行以下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Microsoft/vcpkg.git</span><br><span class="line"><span class="built_in">cd</span> vcpkg</span><br><span class="line"><span class="comment"># run bootstrap-vcpkg.bat</span></span><br><span class="line">.\bootstrap-vcpkg.bat</span><br><span class="line"><span class="comment"># Then, to hook up user-wide integration, run (note: requires admin on first use)</span></span><br><span class="line">.\vcpkg integrate install</span><br><span class="line"><span class="comment"># 直接 vcpkg.exe integrate install 也可以，上面应该是在power shell中使用的命令</span></span><br><span class="line"><span class="comment"># 这个命令就是使该工具的作用范围为全局用户范围</span></span><br><span class="line"><span class="comment"># Install any packages with</span></span><br><span class="line">.\vcpkg install package1 package2 ...</span><br><span class="line">.\vcpkg integrate install</span><br></pre></td></tr></table></figure><p>然后打开 Visual Studio 2017 或者 2015，直接使用<code>#include</code>导入头文件，愉快的使用吧~</p><h3 id="配置Tab自动补全"><a href="#配置Tab自动补全" class="headerlink" title="配置Tab自动补全"></a>配置Tab自动补全</h3><p>vcpkg支持自动补全，包括<strong>命令、包名、选项</strong>等 ，通过输入以下命令在power shell中开启自动补全功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\vcpkg integrate powershell</span><br></pre></td></tr></table></figure><p>重启power shell即可。</p><h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><p>查看托管在<em>ReadTheDocs</em>的<a href="https://vcpkg.readthedocs.io/" target="_blank" rel="noopener">文档</a> 。</p><h2 id="vcpkg安装gtest"><a href="#vcpkg安装gtest" class="headerlink" title="vcpkg安装gtest"></a>vcpkg安装gtest</h2><p>先使用<code>search</code>命令搜索一下gtest是否包含在支持安装的列表中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\vcpkg&gt;vcpkg.exe search gtest</span><br><span class="line">gtest                1.8-1            GoogleTest and GoogleMock testing framewor</span><br><span class="line">ks.</span><br><span class="line"></span><br><span class="line">If your library is not listed, please open an issue at and/or consider making a</span><br><span class="line">pull request:</span><br><span class="line">    https://github.com/Microsoft/vcpkg/issues</span><br></pre></td></tr></table></figure><p>使用<code>install</code>命令进行安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">C:\vcpkg&gt;vcpkg.exe install gtest</span><br><span class="line">The following packages will be built and installed:</span><br><span class="line">    gtest:x86-windows</span><br><span class="line">Starting package 1/1: gtest:x86-windows</span><br><span class="line">Building package gtest:x86-windows...</span><br><span class="line">-- CURRENT_INSTALLED_DIR=C:/vcpkg/installed/x86-windows</span><br><span class="line">-- DOWNLOADS=C:/vcpkg/downloads</span><br><span class="line">-- CURRENT_PACKAGES_DIR=C:/vcpkg/packages/gtest_x86-windows</span><br><span class="line">-- CURRENT_BUILDTREES_DIR=C:/vcpkg/buildtrees/gtest</span><br><span class="line">-- CURRENT_PORT_DIR=C:/vcpkg/ports/gtest/.</span><br><span class="line">-- Downloading https://github.com/google/googletest/archive/release-1.8.0.tar.gz</span><br><span class="line">...</span><br><span class="line">-- Downloading https://github.com/google/googletest/archive/release-1.8.0.tar.gz</span><br><span class="line">... OK</span><br><span class="line">-- Testing integrity of downloaded file...</span><br><span class="line">-- Testing integrity of downloaded file... OK</span><br><span class="line">-- Extracting <span class="built_in">source</span> C:/vcpkg/downloads/google-googletest-release-1.8.0.tar.gz</span><br><span class="line">-- Extracting <span class="keyword">done</span></span><br><span class="line">-- Applying patch C:/vcpkg/ports/gtest/0001-Enable-C-11-features-for-VS2015-fix-</span><br><span class="line">appveyor-fail.patch</span><br><span class="line">-- Applying patch C:/vcpkg/ports/gtest/0001-Enable-C-11-features-for-VS2015-fix-</span><br><span class="line">appveyor-fail.patch <span class="keyword">done</span></span><br><span class="line">-- Configuring x86-windows-rel</span><br><span class="line">-- Configuring x86-windows-rel <span class="keyword">done</span></span><br><span class="line">-- Configuring x86-windows-dbg</span><br><span class="line">-- Configuring x86-windows-dbg <span class="keyword">done</span></span><br><span class="line">-- Build x86-windows-rel</span><br><span class="line">-- Build x86-windows-rel <span class="keyword">done</span></span><br><span class="line">-- Build x86-windows-dbg</span><br><span class="line">-- Build x86-windows-dbg <span class="keyword">done</span></span><br><span class="line">-- Installing: C:/vcpkg/packages/gtest_x86-windows/share/gtest/copyright</span><br><span class="line">-- Performing post-build validation</span><br><span class="line">-- Performing post-build validation <span class="keyword">done</span></span><br><span class="line">Building package gtest:x86-windows... <span class="keyword">done</span></span><br><span class="line">Installing package gtest:x86-windows...</span><br><span class="line">Installing package gtest:x86-windows... <span class="keyword">done</span></span><br><span class="line">Elapsed time <span class="keyword">for</span> package gtest:x86-windows: 3.147 min</span><br><span class="line"></span><br><span class="line">Total elapsed time: 3.147 min</span><br><span class="line"></span><br><span class="line">The package gtest is compatible with built-in CMake targets:</span><br><span class="line"></span><br><span class="line">    enable_testing()</span><br><span class="line">    find_package(GTest REQUIRED)</span><br><span class="line">    target_link_libraries(main PRIVATE GTest::GTest GTest::Main)</span><br><span class="line">    add_test(AllTestsInMain main)</span><br></pre></td></tr></table></figure><p>使用<code>list</code>命令查看x86 windows桌面版下gtest是否安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\vcpkg&gt;vcpkg.exe list</span><br><span class="line">gtest[core]:x86-windows        1.8-1            GoogleTest and GoogleMock testin</span><br><span class="line">g frameworks.</span><br></pre></td></tr></table></figure><p>还可以通过在包名后面指定架构安装特定的包，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x86-uwp:  Universal Windows Platform</span></span><br><span class="line"><span class="comment"># x64-windows:  x64 Desktop</span></span><br><span class="line">C:\vcpkg&gt;vcpkg.exe install sqlite3:x86-uwp zlib:x64-windows </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有支持的目标</span></span><br><span class="line">C:\vcpkg&gt;vcpkg.exe <span class="built_in">help</span> triplet </span><br><span class="line">Available architecture triplets:</span><br><span class="line">  arm-uwp</span><br><span class="line">  arm64-uwp</span><br><span class="line">  x64-uwp</span><br><span class="line">  x64-windows-static</span><br><span class="line">  x64-windows</span><br><span class="line">  x86-uwp</span><br><span class="line">  x86-windows-static</span><br><span class="line">  x86-windows</span><br></pre></td></tr></table></figure><p>最后，使用<code>integrate</code>命令使得gtest可以被用于所有当前用户的项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\vcpkg&gt;vcpkg.exe integrate install</span><br><span class="line">Applied user-wide integration <span class="keyword">for</span> this vcpkg root.</span><br><span class="line"></span><br><span class="line">All MSBuild C++ projects can now <span class="comment">#include any installed libraries.</span></span><br><span class="line">Linking will be handled automatically.</span><br><span class="line">Installing new libraries will make them instantly available.</span><br><span class="line"></span><br><span class="line">CMake projects should use: <span class="string">"-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems</span></span><br><span class="line"><span class="string">/vcpkg.cmake"</span></span><br><span class="line"><span class="comment"># 使用 vcpkg.exe integrate remove 移除整合</span></span><br></pre></td></tr></table></figure><p> 至此，一次<code>vcpkg</code>的使用就结束了，比起之前自己编译配置路径确实方便了不少，关键还几乎不会出错，是很赞了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vcpkg介绍&quot;&gt;&lt;a href=&quot;#vcpkg介绍&quot; class=&quot;headerlink&quot; title=&quot;vcpkg介绍&quot;&gt;&lt;/a&gt;vcpkg介绍&lt;/h2&gt;&lt;p&gt;先把官方仓库的连接撂在&lt;a href=&quot;https://github.com/Microsoft/v
      
    
    </summary>
    
      <category term="tools" scheme="https://callmexss.github.io/categories/tools/"/>
    
    
      <category term="vs" scheme="https://callmexss.github.io/tags/vs/"/>
    
      <category term="package control" scheme="https://callmexss.github.io/tags/package-control/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 14th week</title>
    <link href="https://callmexss.github.io/2017/12/07/term-1-14th-week/"/>
    <id>https://callmexss.github.io/2017/12/07/term-1-14th-week/</id>
    <published>2017-12-07T03:31:34.000Z</published>
    <updated>2019-03-28T13:35:20.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1207"><a href="#1207" class="headerlink" title="1207"></a>1207</h2><h3 id="【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别"><a href="#【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别" class="headerlink" title="【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别"></a>【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别</h3><p><a href="http://www.cnblogs.com/ibook360/archive/2011/11/28/2266062.html" target="_blank" rel="noopener">【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别</a></p><blockquote><p><strong>HashSet</strong>：哈希表是通过使用称为散列法的机制来存储信息的，元素并没有以某种特定顺序来存放；</p><p><strong>LinkedHashSet</strong>：以元素插入的顺序来维护集合的链接表，允许以插入的顺序在集合中迭代；  </p><p><strong>TreeSet</strong>：提供一个使用树结构存储Set接口的实现，对象以升序顺序存储，访问和遍历的时间很快。</p></blockquote><h3 id="c-模板类问题"><a href="#c-模板类问题" class="headerlink" title="c++ 模板类问题"></a>c++ 模板类问题</h3><p>c++ 模板类不分离，声明和定义均写在同一个头文件中。否者会有编译错误，据说这种编译是可以解决的，具体未查。</p><h2 id="1208"><a href="#1208" class="headerlink" title="1208"></a>1208</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><blockquote><p><strong>抽象类是</strong>不完整的，它只能用作基<strong>类</strong>。 在面向对象方法中，<strong>抽象类</strong>主要用来进行类型隐藏和充当全局变量的角色。</p></blockquote><p><strong>c++接口</strong></p><blockquote><p>接口描述了类的行为和功能，而不需要完成类的特定实现。</p><p>C++ 接口是使用<strong>抽象类</strong>来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。</p><p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用 “= 0” 来指定的。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 纯虚函数</span></span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>设计<strong>抽象类</strong>（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p><p>因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数，这也意味着 C++ 支持使用 ABC 声明接口。如果没有在派生类中重载纯虚函数，就尝试实例化该类的对象，会导致编译错误。</p><p>可用于实例化对象的类被称为<strong>具体类</strong>。</p></blockquote><p>抽象类作为基类时必须实现其包含的所有方法，否则继承该抽象类的类仍旧是抽象类，只能继续作为基类使用。下面的代码只实现抽象类中的一个纯虚函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 纯虚函数</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>:</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Worker() &#123;&#125;;</span><br><span class="line">  ~Worker() &#123;&#125;;</span><br><span class="line">  <span class="comment">// 需要重新声明</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Worker::eat()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"I can eat.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Worker *worker = <span class="keyword">new</span> Worker();</span><br><span class="line">  worker-&gt;eat();</span><br><span class="line">  <span class="keyword">delete</span> worker;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器中提示出现如下错误：</p><p><code>错误(活动)    E0322    不允许使用抽象类类型 &quot;Worker&quot; 的对象</code></p><p>正确编码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 纯虚函数</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>:</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Worker() &#123;&#125;;</span><br><span class="line">  ~Worker() &#123;&#125;;</span><br><span class="line">  <span class="comment">// 需要重新声明</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Worker::eat()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"I can eat.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Worker::move()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"I can move.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Worker *worker = <span class="keyword">new</span> Worker();</span><br><span class="line">  worker-&gt;eat();</span><br><span class="line">  worker-&gt;move();</span><br><span class="line">  <span class="keyword">delete</span> worker;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I can eat.</span><br><span class="line">I can move.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1207&quot;&gt;&lt;a href=&quot;#1207&quot; class=&quot;headerlink&quot; title=&quot;1207&quot;&gt;&lt;/a&gt;1207&lt;/h2&gt;&lt;h3 id=&quot;【JAVA基础】HashSet、LinkedHashSet、TreeSet使用区别&quot;&gt;&lt;a href=&quot;#【JAV
      
    
    </summary>
    
    
      <category term="java" scheme="https://callmexss.github.io/tags/java/"/>
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 13th week</title>
    <link href="https://callmexss.github.io/2017/11/27/term-1-13th-week/"/>
    <id>https://callmexss.github.io/2017/11/27/term-1-13th-week/</id>
    <published>2017-11-27T13:52:05.000Z</published>
    <updated>2019-03-28T13:35:20.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1127"><a href="#1127" class="headerlink" title="1127"></a>1127</h2><h3 id="Linux-下的输入输出和错误流"><a href="#Linux-下的输入输出和错误流" class="headerlink" title="Linux 下的输入输出和错误流"></a>Linux 下的输入输出和错误流</h3><p>stdin     标准输入流，默认键盘<br>stdout  标准输出流，默认屏幕<br>stderr   标准错误流，错误输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// printf("input a: ");</span></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"input a: "</span>);</span><br><span class="line">  <span class="comment">// scanf("%d", &amp;a);</span></span><br><span class="line">  <span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">"%d"</span>, &amp;a);</span><br><span class="line">  <span class="keyword">if</span> (a &lt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// stderr</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"a must larger than 0\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// a return value is necessary</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linux下可以使用<code>&gt;, &gt;&gt;, &lt;, &lt;&lt;</code>进行流的重定向，<code>&lt;, &gt;</code>会覆盖文件，<code>&lt;&lt;, &gt;&gt;</code>追加写入文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filaname: main.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a, b;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input a: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input b: "</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> == b) <span class="comment">// can avoid the fault caused by misusing '=' and '=='</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"b can't equal to 0."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d / %d = %d"</span>, a, b, a / b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用流重定向输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c</span><br><span class="line">./a.out 1&gt; t.txt 2&gt; f.txt</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">cat t.txt</span><br><span class="line"><span class="comment"># input a: input b: </span></span><br><span class="line">cat f.txt</span><br><span class="line"><span class="comment"># b can't equal to 0.</span></span><br><span class="line"><span class="built_in">echo</span> $?</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>管道功能示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="comment"># a.out  flow.txt  f.txt  input.txt  main.c  t.txt</span></span><br><span class="line">ls | grep txt</span><br><span class="line"><span class="comment"># flow.txt</span></span><br><span class="line"><span class="comment"># f.txt</span></span><br><span class="line"><span class="comment"># input.txt</span></span><br><span class="line"><span class="comment"># t.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: avg.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum;</span><br><span class="line">  <span class="keyword">float</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d,%f"</span>, &amp;sum, &amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%f"</span>, sum / n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filename: input.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(flag)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;flag);</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += flag;</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d,%d"</span>,sum,n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行</span></span><br><span class="line"><span class="comment">./input.out | ./avg.out</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">200</span></span><br><span class="line"><span class="comment">300</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">200.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="1129"><a href="#1129" class="headerlink" title="1129"></a>1129</h2><h3 id="python-在Ubuntu下后台运行"><a href="#python-在Ubuntu下后台运行" class="headerlink" title="python 在Ubuntu下后台运行"></a>python 在Ubuntu下后台运行</h3><blockquote><p>使用 screen 很方便，有以下几个常用选项：</p><ul><li>用<code>screen -dmS *session name*</code>来建立一个处于断开模式下的会话（并指定其会话名）。</li><li>用<code>screen -list</code>来列出所有会话。</li><li>用<code>screen -r *session name*</code>来重新连接指定会话。</li><li>用快捷键<code>CTRL-a d</code>来暂时断开当前会话。</li></ul></blockquote><p>引用自 <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html" target="_blank" rel="noopener">Linux 技巧：让进程在后台可靠运行的几种方法</a></p><h3 id="Java虚拟机堆内存配置"><a href="#Java虚拟机堆内存配置" class="headerlink" title="Java虚拟机堆内存配置"></a>Java虚拟机堆内存配置</h3><p>使用Gradle编译Freenet时出现了如下错误：</p><p><a href="https://stackoverflow.com/questions/26143740/getting-gradle-error-could-not-reserve-enough-space-for-object-heap-constantly" target="_blank" rel="noopener">getting-gradle-error-could-not-reserve-enough-space-for-object-heap-constantly</a></p><p>感谢Stack Overflow…解决方法是在环境变量中进行如下设置：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; _JAVA_OPTIONS=-Xmx512M</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ol><li>Right click on start-button and open “System”</li><li>Go to Advanced system settings on the left side</li><li>Click the button “Environment Variables …”</li><li>In System Variables, click “New…”</li><li>New Variable Name: _JAVA_OPTIONS</li><li>New Variable Value: -Xmx512M</li><li>Click OK</li><li>Restart Visual Studio, so the variable is picked up</li></ol></blockquote><h2 id="1130"><a href="#1130" class="headerlink" title="1130"></a>1130</h2><h3 id="JAVA泛型小记"><a href="#JAVA泛型小记" class="headerlink" title="JAVA泛型小记"></a>JAVA泛型小记</h3><blockquote><p><code>?, T，E，K，V</code>这些全都属于java泛型的通配符，这些通配符其实<strong>其实没什么区别</strong>，只不过是一个约定好的代码，也就是说：</p><p>使用大写字母A,B,C,D……X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已</p><p><strong>?</strong> 表示不确定的java类型</p><p><strong>T (type)</strong> 表示具体的一个java类型</p><p><strong>K V (key value)</strong>分别代表java键值中的Key Value</p><p><strong>E</strong> 代表Element</p><p>作者：程序鱼<br>链接：<a href="http://www.jianshu.com/p/95f349258afb" target="_blank" rel="noopener">http://www.jianshu.com/p/95f349258afb</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="1202"><a href="#1202" class="headerlink" title="1202"></a>1202</h2><h3 id="win7系统下使用vs-2017编译boost-1-65-1"><a href="#win7系统下使用vs-2017编译boost-1-65-1" class="headerlink" title="win7系统下使用vs 2017编译boost 1.65.1"></a>win7系统下使用vs 2017编译boost 1.65.1</h3><p>1.启动vs 2017命令行工具。</p><p>2.切换目录到boost根目录下（有bootstrap.bat的那个目录）。</p><p>3.执行<code>bootstrap.bat</code> 。</p><p>4.执行.\b2 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\<span class="built_in">local</span>\boost165_1&gt;bootstrap.bat</span><br><span class="line"></span><br><span class="line">Building Boost.Build engine</span><br><span class="line"></span><br><span class="line">Bootstrapping is <span class="keyword">done</span>. To build, run:</span><br><span class="line"></span><br><span class="line">    .\b2</span><br><span class="line"></span><br><span class="line">To adjust configuration, edit <span class="string">'project-config.jam'</span>.</span><br><span class="line"></span><br><span class="line">Further information:</span><br><span class="line"></span><br><span class="line">    - Command line <span class="built_in">help</span>:</span><br><span class="line">    .\b2 --<span class="built_in">help</span></span><br><span class="line">    </span><br><span class="line">    - Getting started guide:</span><br><span class="line">    http://boost.org/more/getting_started/windows.html</span><br><span class="line">    </span><br><span class="line">    - Boost.Build documentation:</span><br><span class="line">    http://www.boost.org/build/doc/html/index.html</span><br><span class="line"></span><br><span class="line">C:\<span class="built_in">local</span>\boost165_1&gt;.\b2</span><br><span class="line"></span><br><span class="line">...... // compile progress</span><br><span class="line"></span><br><span class="line">The Boost C++ Libraries were successfully built!</span><br><span class="line"></span><br><span class="line">The following directory should be added to compiler include paths:</span><br><span class="line"></span><br><span class="line">    C:\<span class="built_in">local</span>\boost_1_65_1</span><br><span class="line"></span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    C:\<span class="built_in">local</span>\boost_1_65_1\stage\lib</span><br></pre></td></tr></table></figure><h2 id="1203"><a href="#1203" class="headerlink" title="1203"></a>1203</h2><h3 id="c-下实现并使用split方法"><a href="#c-下实现并使用split方法" class="headerlink" title="c++ 下实现并使用split方法"></a>c++ 下实现并使用split方法</h3><p>参见<a href="http://www.cnblogs.com/dfcao/p/cpp-FAQ-split.html" target="_blank" rel="noopener">C++常见问题: 字符串分割函数 split</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1127&quot;&gt;&lt;a href=&quot;#1127&quot; class=&quot;headerlink&quot; title=&quot;1127&quot;&gt;&lt;/a&gt;1127&lt;/h2&gt;&lt;h3 id=&quot;Linux-下的输入输出和错误流&quot;&gt;&lt;a href=&quot;#Linux-下的输入输出和错误流&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="linux" scheme="https://callmexss.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 12th week</title>
    <link href="https://callmexss.github.io/2017/11/20/term-1-12th-week/"/>
    <id>https://callmexss.github.io/2017/11/20/term-1-12th-week/</id>
    <published>2017-11-20T13:07:12.000Z</published>
    <updated>2019-03-28T13:35:20.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1120"><a href="#1120" class="headerlink" title="1120"></a>1120</h2><h3 id="hexo-图片加载不正常"><a href="#hexo-图片加载不正常" class="headerlink" title="hexo 图片加载不正常"></a>hexo 图片加载不正常</h3><p>一个来自简书的<a href="http://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="noopener">解决方法</a> 。</p><p>该方法使用的是<code>hexo-asset-img</code>插件，图片的插入方法不再使用<em>markdown</em>的语法，而是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">asset_img</span> <span class="string">example.png</span> <span class="string">plus</span> <span class="string">title</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1121"><a href="#1121" class="headerlink" title="1121"></a>1121</h2><h3 id="c-基本概念"><a href="#c-基本概念" class="headerlink" title="c++ 基本概念"></a>c++ 基本概念</h3><blockquote><p>一个 C++ 程序由含有<a href="http://zh.cppreference.com/w/cpp/language/declarations" target="_blank" rel="noopener">声明</a>的文本文件序列（通常为头文件与源文件）组成。它们被<a href="http://zh.cppreference.com/w/cpp/language/translation_phases" target="_blank" rel="noopener">翻译</a>成一个可执行文件，操作系统通过调用其 <a href="http://zh.cppreference.com/w/cpp/language/main_function" target="_blank" rel="noopener">main 函数</a>执行这一程序。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function declaration</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"hellowrold"</span>;</span><br><span class="line">println(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function implementation</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>在 C++ 程序中，一些被称为<a href="http://zh.cppreference.com/w/cpp/keyword" target="_blank" rel="noopener">关键词</a>的词语有着特殊的含义。其它词语可以被用作<a href="http://zh.cppreference.com/w/cpp/language/identifiers" target="_blank" rel="noopener">标识符</a>。在翻译的过程中，<a href="http://zh.cppreference.com/w/cpp/comment" target="_blank" rel="noopener">注释</a>会被忽略。程序中的某些字符必须通过<a href="http://zh.cppreference.com/w/cpp/language/escape" target="_blank" rel="noopener">转义序列</a>表示。</p></blockquote> <img src="/2017/11/20/term-1-12th-week/c++关键字.png" title="c++ 关键字"><hr><blockquote><p>C++ 程序中的<strong>实体</strong>包括值、<a href="http://zh.cppreference.com/w/cpp/language/object" target="_blank" rel="noopener">对象</a>、<a href="http://zh.cppreference.com/w/cpp/language/reference" target="_blank" rel="noopener">引用</a>、 <a href="http://zh.cppreference.com/w/cpp/language/structured_binding" target="_blank" rel="noopener">结构化绑定</a> (C++17 起)、<a href="http://zh.cppreference.com/w/cpp/language/functions" target="_blank" rel="noopener">函数</a>、<a href="http://zh.cppreference.com/w/cpp/language/enum" target="_blank" rel="noopener">枚举项</a>、<a href="http://zh.cppreference.com/w/cpp/language/type" target="_blank" rel="noopener">类型</a>、类成员、<a href="http://zh.cppreference.com/w/cpp/language/templates" target="_blank" rel="noopener">模板</a>、<a href="http://zh.cppreference.com/w/cpp/language/template_specialization" target="_blank" rel="noopener">模板特化</a>、<a href="http://zh.cppreference.com/w/cpp/language/namespace" target="_blank" rel="noopener">命名空间</a>、<a href="http://zh.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener">形参包</a>和 this 指针。预处理器<a href="http://zh.cppreference.com/w/cpp/preprocessor/replace" target="_blank" rel="noopener">宏</a>不是 C++ 实体。</p></blockquote><h3 id="c-输入、输出和文件"><a href="#c-输入、输出和文件" class="headerlink" title="c++ 输入、输出和文件"></a>c++ 输入、输出和文件</h3><h4 id="流和缓冲区"><a href="#流和缓冲区" class="headerlink" title="流和缓冲区"></a>流和缓冲区</h4> <img src="/2017/11/20/term-1-12th-week/std-io-complete-inheritance.svg" title="基于流的 I/O 继承图"><p>C++程序将输入和输出视为字节流。输入过程中，程序从输入流中抽取字节；输出过程中，程序将字节插入到输出流中。C++在输入和输出过程只关心字节流而不关心其来源和去向。</p> <img src="/2017/11/20/term-1-12th-week/ioexample.png" title="C++的输入和输出"><p>通常情况下，使用缓冲区可以更高效处理输入和输出。<strong>缓冲区</strong>是一个内存块，作为程序和设备的中间件，用来存储在程序和设备之间流转的数据。</p><h4 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h4> <img src="/2017/11/20/term-1-12th-week/cout.png" title="cout的输出过程"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">// review the iterator</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ostream_iterator&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>);</span><br><span class="line">copy(v.begin(), v.end(), out);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// review the vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; charlist = &#123; <span class="string">'a'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>, <span class="string">'l'</span>, <span class="string">'e'</span> &#125;;</span><br><span class="line">charlist.push_back(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">show(charlist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ust the put function, which displays a char</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charlist.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">": "</span>;</span><br><span class="line"><span class="built_in">cout</span>.put(charlist[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * state1 = <span class="string">"Lfish"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * state2 = <span class="string">"theoceanside"</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(state1);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use the write function, which displays a string by length</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Increase loop index:\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>.write(state1, i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Decrease loop index:\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (i = len; i &gt; <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">cout</span>.write(state1, i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exceed the string length</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"exceed the string length: "</span>;</span><br><span class="line"><span class="built_in">cout</span>.write(state1, len + <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apple.</span><br><span class="line">0: a</span><br><span class="line">1: p</span><br><span class="line">2: p</span><br><span class="line">3: l</span><br><span class="line">4: e</span><br><span class="line">5: .</span><br><span class="line">W</span><br><span class="line">Increase loop index:</span><br><span class="line">L</span><br><span class="line">Lf</span><br><span class="line">Lfi</span><br><span class="line">Lfis</span><br><span class="line">Lfish</span><br><span class="line">Decrease loop index:</span><br><span class="line">Lfish</span><br><span class="line">Lfis</span><br><span class="line">Lfi</span><br><span class="line">Lf</span><br><span class="line">L</span><br><span class="line">exceed the string length: Lfishaaath</span><br></pre></td></tr></table></figure><p>cout 格式化输出：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// some include, define, usring...</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// flush 操作用于刷新缓冲区。</span></span><br><span class="line">    <span class="comment">// 向屏幕输出时，不必等到缓冲区填满才输出。</span></span><br><span class="line">    <span class="comment">// 向缓冲区输入换行符或者等待输入时都会刷新缓冲区。</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl; 操作等同于 cout &lt;&lt; flush &lt;&lt; "\n";</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; flush; 等同于 flush(cout);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以用以下方法输出8进制和16进制数。</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 以8进制输出 10</span></span><br><span class="line">oct(<span class="built_in">cout</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 以16进制输出 a</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// '' -&gt; 字符，（本质是整型，多个字符会计算其乘积作为结果）</span></span><br><span class="line">    <span class="comment">// "" -&gt; 字符串</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; 'a: '; ---&gt; 613a20</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 设置宽度</span></span><br><span class="line">    <span class="built_in">cout</span>.width(<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"apple"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; flush &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  </span><br><span class="line">    dec(<span class="built_in">cout</span>);</span><br><span class="line">    <span class="keyword">int</span> w = <span class="built_in">cout</span>.width(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"default field width = "</span> &lt;&lt; w &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>.width(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span> &lt;&lt; <span class="string">':'</span>;</span><br><span class="line">    <span class="built_in">cout</span>.width(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"N * N"</span> &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i *= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>.width(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">':'</span>;</span><br><span class="line">        <span class="built_in">cout</span>.width(<span class="number">8</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i * i &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 设置填充字符</span></span><br><span class="line">    <span class="built_in">cout</span>.fill(<span class="string">'*'</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * staff[<span class="number">2</span>] = &#123; <span class="string">"Waldo Whipsnade"</span>, <span class="string">"Wilmarie Wooper"</span> &#125;;</span><br><span class="line">    <span class="keyword">long</span> bonus[<span class="number">2</span>] = &#123; <span class="number">900</span>, <span class="number">1350</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; staff[i] &lt;&lt; <span class="string">": $"</span>;</span><br><span class="line">        <span class="built_in">cout</span>.width(<span class="number">7</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; bonus[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 设置浮点数精度</span></span><br><span class="line">    <span class="comment">// 四舍五入</span></span><br><span class="line">    <span class="keyword">float</span> pi = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setf --&gt; set flag</span></span><br><span class="line">    <span class="built_in">cout</span>.setf(ios_base::showpoint);</span><br><span class="line">    <span class="keyword">float</span> ten = <span class="number">10.</span>;</span><br><span class="line">    <span class="keyword">float</span> twenty0four = <span class="number">20.04</span>;</span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ten &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; twenty0four &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">a</span><br><span class="line">a:        apple</span><br><span class="line"></span><br><span class="line">        default field width = 0:</span><br><span class="line">    N:   N * N:</span><br><span class="line">    1:       1:</span><br><span class="line">   10:     100:</span><br><span class="line">  100:   10000:</span><br><span class="line">Waldo Whipsnade: $****900</span><br><span class="line">Wilmarie Wooper: $***1350</span><br><span class="line"></span><br><span class="line">3.14159</span><br><span class="line">3.1416</span><br><span class="line"></span><br><span class="line">10.00</span><br><span class="line">20.04</span><br></pre></td></tr></table></figure><p>格式化常量：</p><table><thead><tr><th>Constant</th><th>Meaning</th></tr></thead><tbody><tr><td>ios_base::boolalpha</td><td>Input and output bool values as true and false</td></tr><tr><td>ios_base::showbase</td><td>Use C++ base prefixes (0,0x) on output</td></tr><tr><td>ios_base::showpoint</td><td>Show trailing decimal point</td></tr><tr><td>ios_base::uppercase</td><td>Use uppercase letters for hex output, E notation</td></tr><tr><td>ios_base::showpos</td><td>Use + before positive numbers</td></tr></tbody></table><h2 id="1122"><a href="#1122" class="headerlink" title="1122"></a>1122</h2><h3 id="tar——压缩、解压缩命令"><a href="#tar——压缩、解压缩命令" class="headerlink" title="tar——压缩、解压缩命令"></a>tar——压缩、解压缩命令</h3><blockquote><p>压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称<br>查　询：tar -jtv -f filename.tar.bz2<br>解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录<br>————tar -zxvf 路径/文件名.tar.gz<br>来自: <a href="http://man.linuxde.net/tar" target="_blank" rel="noopener">http://man.linuxde.net/tar</a></p></blockquote><h2 id="1123"><a href="#1123" class="headerlink" title="1123"></a>1123</h2><h3 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h3><h4 id="if-ifdef-ifndef"><a href="#if-ifdef-ifndef" class="headerlink" title="#if - #ifdef - #ifndef"></a>#if - #ifdef - #ifndef</h4><blockquote><p>预处理器支持有条件地编译部分源文件。这一行为由 <code>#if</code>、<code>#else</code>、<code>#elif</code>、<code>#ifdef</code>、<code>#ifndef</code> 与 <code>#endif</code> 指令所控制。</p></blockquote><table><thead><tr><th>语法</th></tr></thead><tbody><tr><td><code>#if</code> 表达式</td></tr><tr><td><code>#ifdef</code> 表达式</td></tr><tr><td><code>#ifndef</code> 表达式</td></tr><tr><td><code>#elif</code> 表达式</td></tr><tr><td><code>#else</code></td></tr><tr><td><code>#endif</code></td></tr></tbody></table><blockquote><p><strong>解释</strong><br>条件编译预处理块由 <code>#if</code>、<code>#ifdef</code> 或 <code>#ifndef</code> 指令开始，并可选地包含任意多个 <code>#elif</code> 指令，接下来是至多一个可选的 <code>#else</code> 指令，并以 <code>#endif</code> 指令结束。嵌套的条件编译区块会被单独处理。</p><p>各个 <code>#if</code>、<code>#elif</code>、<code>#else</code>、<code>#ifdef</code> 和 <code>#ifndef</code> 指令所控制的代码块在第一个不属于内部嵌套的条件编译区块的 <code>#elif</code>、<code>#else</code> 或 <code>#endif</code> 指令处结束。</p><p><code>#if</code>、<code>#ifdef</code> 和 <code>#ifndef</code> 指令测试其所指定的条件（见下文），如果条件求值为真，则编译其控制的代码块。此时后续的 <code>#else</code> 和 <code>#elif</code> 指令将被忽略。否则，如果所指定的条件求值为假，则将跳过其所控制的代码块，然后处理后续的 <code>#else</code> 或 <code>#elif</code> 指令（如果存在）。前一种情况下，<code>#else</code> 指令所控制的代码块将会被无条件地进行编译。后一种情况下，<code>#elif</code> 指令按照与 <code>#if</code> 指令相同的方式执行：即测试条件是否满足，并根据其结果决定编译或跳过其所控制的代码块，后一种情况下继续处理后续的 <code>#elif</code> 和 <code>#else</code> 指令。条件编译区块以 <code>#endif</code> 指令结束。</p></blockquote><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABCD 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ABCD</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1: yes\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1: no\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ABCD</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2: no1\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> ABCD == 2</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2: yes\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"2: no2\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(DCBA) &amp;&amp; (ABCD &lt; 2*4-3)</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"3: yes\n"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="define-include"><a href="#define-include" class="headerlink" title="#define - # - ## - #include"></a>#define - # - ## - #include</h4><p>#define</p><blockquote><p>预处理器支持文本宏替换。亦支持仿函数文本宏替换。<br>| 语法                            |<br>| —————————– |<br>| <code>#define</code> 标识符 替换列表(可选)        |<br>| <code>#define</code> 标识符( 形参 ) 替换列表     |<br>| <code>#define</code> 标识符( 形参, … ) 替换列表 |<br>| <code>#define</code> 标识符( … ) 替换列表     |<br>| <code>#undef</code> 标识符                  |</p></blockquote><hr><p># 和 ##</p><blockquote><p>仿函数宏中， 替换列表 中标识符前的 <code>#</code> 运算符经通过标识符运行形参替换，并将结果以引号环绕，等效地创建字符串字面量。另外，预处理器添加反斜杠以转义环绕内嵌字符串字面量的引号，若它存在，并按需要双写字符串中的反斜杠。移除所有前导和尾随空白符，并将文本中部（但非内嵌字符串字面量中内）的任何空白符序列缩减成单个空格。此操作被称为“字符串化”，若字符串化的结果不是合法的字符串字面量，则行为未定义。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// # 出现于 __VA_ARGS__ 前时，整个展开的 __VA_ARGS__ 被包在引号中：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> showlist(...) puts(#__VA_ARGS__)</span></span><br><span class="line">showlist();            <span class="comment">// 展开成 puts("")</span></span><br><span class="line">showlist(<span class="number">1</span>, <span class="string">"x"</span>, <span class="keyword">int</span>); <span class="comment">// 展开成 puts("1, \"x\", int")</span></span><br></pre></td></tr></table></figure><blockquote><p>替换列表 中任何二个相继标识符间的 <code>##</code> 运算符在二个标识符（首先未被宏展开）上运行形参替换，然后连接结果。此操作被称为“连接”或“记号粘贴”。只有一同组成合法记号的记号才可以粘贴：组成更长标识符的标识符、组成数字的数位，或组成 <code>+=</code> 的运算符 <code>+</code> 与 <code>=</code>。不能以粘贴 <code>/</code> 与 <code>*</code> 创建注释，因为考虑文本宏替换前，注释就被移除了。若连接的结果不是合法记号，则行为未定义。</p></blockquote><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 制造函数工厂并使用它</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNCTION(name, a) int fun_##name() &#123; return a;&#125;</span></span><br><span class="line"> </span><br><span class="line">FUNCTION(abcd, <span class="number">12</span>)</span><br><span class="line">FUNCTION(fff, <span class="number">2</span>)</span><br><span class="line">FUNCTION(qqq, <span class="number">23</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> FUNCTION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNCTION 34</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT(a) std::cout &lt;&lt; #a &lt;&lt; <span class="meta-string">'\n'</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"abcd: "</span> &lt;&lt; fun_abcd() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"fff: "</span> &lt;&lt; fun_fff() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"qqq: "</span> &lt;&lt; fun_qqq() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; FUNCTION &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    OUTPUT(million);               <span class="comment">// 注意缺少引号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>#include </p><table><thead><tr><th>语法</th></tr></thead><tbody><tr><td>#include &lt;文件名&gt;</td></tr><tr><td>#include “文件名”</td></tr><tr><td><code>__has_include ( &quot; 文件名 &quot; )</code>                                                                                                                                                                 <code>__has_include ( &lt; 文件名 &gt; )</code></td></tr></tbody></table><blockquote><p>任何预处理记号（宏常量或者表达式）都允许用作 <code>#include</code> 和 <code>__has_include</code> (C++17 起)的实参，只要它们扩展为以 &lt; &gt; 或者 “ “ 所包围的字符序列即可。</p></blockquote><p>最近遇到一种头文件里的写法，一直没有查是什么意思，今天偶然看<a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/headers/#define-guard" target="_blank" rel="noopener">谷歌C++风格指南</a> 看到了答案。</p><blockquote><p>头文件应该能够自给自足（self-contained,也就是可以作为第一个头文件被引入），以 <code>.h</code> 结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 <code>.inc</code> 结尾。不允许分离出 <code>-inl.h</code> 头文件的做法。</p></blockquote><blockquote><p>当包含一个文件时，将进行翻译阶段 1 到 4 的处理，其中将递归地包括对其中嵌套的 #include 指令的扩展。为了避免相同文件被重复包含，和当文件（可能传递性地）包含自身时的无限递归，通常会使用头文件防护，整个头文件被包含到：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为保证唯一性, 头文件的命名应该基于所在项目源代码树的全路径.</span></span><br><span class="line"><span class="comment">// 例如, 项目 foo 中的头文件 foo/src/bar/baz.h 可按如下方式保护:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FOO_BAR_BAZ_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOO_BAR_BAZ_H_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FOO_BAR_BAZ_H_</span></span></span><br></pre></td></tr></table></figure><p>即头文件需要<strong><code>#define</code> 保护</strong>（所有头文件都应该使用 <code>#define</code> 来防止头文件被多重包含, 命名格式当是: <code>&lt;PROJECT&gt;_&lt;PATH&gt;_&lt;FILE&gt;_H_</code> .）。</p><h4 id="error-pragma-line"><a href="#error-pragma-line" class="headerlink" title="#error - #pragma - #line"></a>#error - #pragma - #line</h4><p>参考 <a href="http://zh.cppreference.com/w/cpp/preprocessor" target="_blank" rel="noopener">http://zh.cppreference.com/w/cpp/preprocessor</a></p><h3 id="Kali-Linux-persistence-配置"><a href="#Kali-Linux-persistence-配置" class="headerlink" title="Kali Linux persistence 配置"></a>Kali Linux persistence 配置</h3><ol><li><p>使用UltraISO制作U盘镜像。</p></li><li><p>进入BIOS选择U盘启动。</p></li><li><p>在启动界面选择 Live USB Persistence)。</p></li><li><p>进入系统后打开终端输入gparted进行分区。</p><ol><li>在gparted中选择U盘（它会识别系统中可以识别的所有硬盘，所以看仔细别把C盘干掉了…）。</li><li>选择合适的新分区大小，设置为<strong>ext4</strong>格式，创建新分区（U盘可以留一部分空间继续当U盘 :)…在Windows下面新建分区的部分不会再被识别，所以看到U盘容量变小了不要差异…）。</li><li>标签名称设置为persistence（别的俺没有试，不造管用不…）。</li><li>最后前往不要忘了保存所有设置，在菜单栏某一条里面（会进行分区操作之类的…稍等一会儿）。</li><li>挂载新分区并进行配置。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/my_kali</span><br><span class="line">mount /dev/sdb2 /mnt/my_kali <span class="comment"># replace 'sdb2' with the name of your partition. </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/ union"</span> &gt;&gt; /mnt/my_kali/persistence.conf</span><br><span class="line">umount /mnt/usb</span><br></pre></td></tr></table></figure><p>然后创建一个文件，重启一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch test.txt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ol><p>然后如果重启以后没有看到这个文件…先别着急，打开gparted看一下配置是否还在，就是标签还是不是persistence之类的，如果还在，那就说明配置成功了，再创建一个文件试试看吧。Any way this works fine for me :) </p><p>之后的一些配置：</p><p>修改一下sources.list可以加快软件的安装和更新速度：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a <span class="comment"># 下查看一下自己是什么版本</span></span><br><span class="line"></span><br><span class="line">vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># sources.list</span></span><br><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#中科大</span></span><br><span class="line"><span class="comment">#deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"><span class="comment">#deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清华大学</span></span><br><span class="line"><span class="comment">#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line"><span class="comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浙大</span></span><br><span class="line"><span class="comment">#deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line"><span class="comment">#deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br></pre></td></tr></table></figure><hr><p>如果你是IPv6用户，可以改个hosts，然后你就可以用Google了：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">mv /etc/hosts /etc/hosts.bak</span><br><span class="line">wget https://raw.githubusercontent.com/lennylxx/ipv6-hosts/master/hosts</span><br><span class="line">mv hosts /etc/</span><br><span class="line"></span><br><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure><p>可以写个脚本执行一下，也可以单步执行。</p><hr><p>如果你是python用户，可以改一下pip的默认仓库主页，加快包安装的速度：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 ~ 目录下是否有 .pip 文件夹</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="comment"># 没有建一个</span></span><br><span class="line">mkdir .pip &amp;&amp; <span class="built_in">cd</span> .pip</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">vim pip.config</span><br><span class="line"><span class="comment"># pip.config</span></span><br><span class="line">[global]</span><br><span class="line">timeout = 60</span><br><span class="line">index-url = http://download.zope.org/ppix</span><br></pre></td></tr></table></figure><h2 id="1124"><a href="#1124" class="headerlink" title="1124"></a>1124</h2><h3 id="vs2017-使用-Google-Test"><a href="#vs2017-使用-Google-Test" class="headerlink" title="vs2017 使用 Google Test"></a>vs2017 使用 Google Test</h3><p>想要养成好的编码习惯，边写程序边写单元注释，找到了<a href="https://github.com/google/googletest" target="_blank" rel="noopener"><strong>gtest</strong></a>框架，于是准备试用一下。结果就折腾了一下午，记一下这个大坑。</p><p>首先<strong>What</strong> ：</p><blockquote><p>gtest (Google Test) is a unit testing library for the C++ programming language, based on the xUnit architecture.</p></blockquote><p>简单来说它就是一个和<strong>Junit</strong>类似的单元测试框架。</p><p>然后<strong>How</strong> ：</p><p>从官方仓库的<strong>release</strong>中下载压缩文件，解压后直接使用vs2017打开工程编译即可，编译完成后得到库文件<code>gtestd.lib</code> 。按照下面的方法配置到vs2017中：</p><ol><li><p>右键点击打开方案属性窗口，选择c/c++中的常规选项，在<strong>附加包含目录</strong>下填入解压缩后文件中的<code>include</code>文件夹路径，或者自己更改<code>include</code>文件夹的位置，如果想对路径搞不对，直接用绝对路径：</p><img src="/2017/11/20/term-1-12th-week/c_c++_general.png" title="配置附加包目录"></li><li><p>选择连接器中的输入选项，在<strong>附加依赖项</strong>中填写<code>gtestd.lib</code>的路径，相对路径写不对请直接用绝对路径：</p><img src="/2017/11/20/term-1-12th-week/linker_input.png" title="配置附加依赖项"><p>如果遇到<code>LNK1104</code>的错误，八成是路径没写对…然后就配置好了，编译一下。</p></li><li><p>运行一下：</p><p><a href="http://www.cnblogs.com/coderzh/archive/2009/03/31/1426758.html" target="_blank" rel="noopener">code</a>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gtest/gtest.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (a == <span class="number">0</span> || b == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="string">"don't do that"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> c = a % b;</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">     <span class="keyword">return</span> b;</span><br><span class="line">   <span class="keyword">return</span> Foo(b, c);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> TEST(FooTest, HandleNoneZeroInput)</span><br><span class="line"> &#123;</span><br><span class="line">   EXPECT_EQ(<span class="number">2</span>, Foo(<span class="number">4</span>, <span class="number">10</span>));</span><br><span class="line">   EXPECT_EQ(<span class="number">6</span>, Foo(<span class="number">30</span>, <span class="number">18</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, _TCHAR* argv[])</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    testing::InitGoogleTest(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="/2017/11/20/term-1-12th-week/test_res.png" title="测试结果"></li></ol><p><strong>最后…</strong><br>   终于搞定…想哭啊！！！</p><h2 id="1125"><a href="#1125" class="headerlink" title="1125"></a>1125</h2><h3 id="c-互斥"><a href="#c-互斥" class="headerlink" title="c++ 互斥"></a>c++ 互斥</h3><p>c++如何实现互斥？来自<a href="https://stackoverflow.com/questions/34524/what-is-a-mutex" target="_blank" rel="noopener">stackoverflow</a>的一个答案：</p><blockquote><p>When I am having a big heated discussion at work, I use a rubber chicken which I keep in my desk for just such occasions. The person holding the chicken is the only person who is allowed to talk. If you don’t hold the chicken you cannot speak. You can only indicate that you want the chicken and wait until you get it before you speak. Once you have finished speaking, you can hand the chicken back to the moderator who will hand it to the next person to speak. This ensures that people do not speak over each other, and also have their own space to talk.</p><p>Replace Chicken with Mutex and person with thread and you basically have the concept of a mutex.</p><p>Of course, before you use the rubber chicken, you need to ask yourself whether you actually need 5 people in one room and would it not just be easier with one person in the room on their own doing all the work. Actually, this is just extending the analogy, but you get the idea.</p></blockquote><p>翻译之就是：</p><p>当我在工作中有一个很想讨论的话题的时候，这种时候我就会用到我一直放在桌上的橡皮鸡了。只有持有橡皮鸡的人才被允许讨论。如果你没有才由它，你就不能说话。你只能表明你需要这只鸡，在你得到这只鸡以前，你只能保持沉默。一旦你的讨论结束了，你需要把这只鸡还给管理者，然后他再将这只鸡发给下一个想要说话的人。这就保证了人们的讨论不会打扰到彼此（同一时间只有一个人在说话），同时他们也拥有独立的空间进行讨论。<br>把鸡替换成互斥锁，把人替换成线程然后你就得到了互斥的概念。<br>​当然，在你准备使用橡皮鸡的时候，你需要问一下你自己你是否真的需要五个人，一个人能不能来完成这整个工作。事实上，这只是扩展了这个比喻，但是你应该已经搞懂这个概念了。</p><p>然后实现的简单<a href="https://stackoverflow.com/questions/4989451/mutex-example-tutorial" target="_blank" rel="noopener">代码</a>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A thread is : Each person</span></span><br><span class="line"><span class="comment">// The mutex is : The door handle</span></span><br><span class="line"><span class="comment">// The lock is : The person's hand</span></span><br><span class="line"><span class="comment">// The resource is : The phone</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::mutex m;<span class="comment">//you can use std::lock_guard if you want to be exception safe</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeACallFromPhoneBooth</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m.lock();<span class="comment">//man gets a hold of the phone booth door and locks it. The other men wait outside</span></span><br><span class="line">      <span class="comment">//man happily talks to his wife from now....</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" Hello Wife"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      i++;<span class="comment">//no other thread can access variable i until m.unlock() is called</span></span><br><span class="line">      <span class="comment">//...until now, with no interruption from other men</span></span><br><span class="line">    m.unlock();<span class="comment">//man lets go of the door handle and unlocks the door</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//This is the main crowd of people uninterested in making a phone call</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//man1 leaves the crowd to go to the phone booth</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">man1</span><span class="params">(makeACallFromPhoneBooth)</span></span>;</span><br><span class="line">    <span class="comment">//Although man2 appears to start second, there's a good chance he might</span></span><br><span class="line">    <span class="comment">//reach the phone booth before man1</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">man2</span><span class="params">(makeACallFromPhoneBooth)</span></span>;</span><br><span class="line">    <span class="comment">//And hey, man3 also joined the race to the booth</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">man3</span><span class="params">(makeACallFromPhoneBooth)</span></span>;</span><br><span class="line"></span><br><span class="line">    man1.join();<span class="comment">//man1 finished his phone call and joins the crowd</span></span><br><span class="line">    man2.join();<span class="comment">//man2 finished his phone call and joins the crowd</span></span><br><span class="line">    man3.join();<span class="comment">//man3 finished his phone call and joins the crowd</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高质量C-C编程指南附录试题笔记"><a href="#高质量C-C编程指南附录试题笔记" class="headerlink" title="高质量C++/C编程指南附录试题笔记"></a>高质量C++/C编程指南附录试题笔记</h3><p><strong>一、请填写BOOL , float, 指针变量 与“零值”比较的 if 语句。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BOOL, give `flag`</span></span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// float, give `x`</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> EPSINON=<span class="number">0.00001</span>;</span><br><span class="line"><span class="keyword">if</span> ((x &gt;= -EPSINON) &amp;&amp; (x &lt;= EPSINON))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// pointer, give `cahr *p`</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><p><strong>二、const 有什么用途？（请至少说明两种）</strong></p><p>（1）可以定义 const 常量。</p><p>（2）const可以修饰函数的参数、返回值，甚至函数的定义体。被const修饰的东西都受到强制保护，可以预防意外的变动，能提高程序的健壮性。</p><p><strong>三、在C++ 程序中调用被 C编译器编译后的函数，为什么要加 extern “C”？</strong></p><p>C++语言支持函数重载，C语言不支持函数重载。函数被C++编译后在库中的名字与C语言的不同。假设某个函数的原型为： void foo(int x, int y);<br>该函数被C编译器编译后在库中的名字为_foo，而C++编译器则会产生像_foo_int_int之类的名字。<br>C++提供了C连接交换指定符号extern“C”来解决名字匹配问题。</p><h2 id="1126"><a href="#1126" class="headerlink" title="1126"></a>1126</h2><h3 id="c-编码规范小例"><a href="#c-编码规范小例" class="headerlink" title="c++ 编码规范小例"></a>c++ 编码规范小例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> // 类名大写，分割用的大括号均换行</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="comment">// public, private等访问控制符缩进 1 个空格</span></span><br><span class="line"> <span class="comment">// 以行为为中心，即public在前</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// 其余缩进均为 2 个空格</span></span><br><span class="line">   Node(); <span class="comment">// 函数和后面的'('之间不带空格分割</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">Start</span><span class="params">(<span class="built_in">string</span> args)</span></span>; <span class="comment">// 函数名每个单词的首字母大写</span></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">GetLoc</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">SetLoc</span><span class="params">(<span class="keyword">float</span> loc)</span></span>; <span class="comment">// 具有相反功能的函数应使用一组反义词来定义 </span></span><br><span class="line">   ...</span><br><span class="line"> <span class="comment">// 以数据为中心，即private在后</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">float</span> loc = <span class="number">0.0</span>; <span class="comment">// 就近原则，最好定义完就初始化</span></span><br><span class="line">   <span class="keyword">bool</span> isStart = <span class="literal">false</span>; <span class="comment">// 变量也是用驼峰命名法，但是开头字母小写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1120&quot;&gt;&lt;a href=&quot;#1120&quot; class=&quot;headerlink&quot; title=&quot;1120&quot;&gt;&lt;/a&gt;1120&lt;/h2&gt;&lt;h3 id=&quot;hexo-图片加载不正常&quot;&gt;&lt;a href=&quot;#hexo-图片加载不正常&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="linux" scheme="https://callmexss.github.io/tags/linux/"/>
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
      <category term="hexo" scheme="https://callmexss.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 11th week</title>
    <link href="https://callmexss.github.io/2017/11/14/term-1-11th-week/"/>
    <id>https://callmexss.github.io/2017/11/14/term-1-11th-week/</id>
    <published>2017-11-14T01:17:49.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1114"><a href="#1114" class="headerlink" title="1114"></a>1114</h2><h3 id="读取文件失败原因总结"><a href="#读取文件失败原因总结" class="headerlink" title="读取文件失败原因总结"></a>读取文件失败原因总结</h3><ol><li><p>文件名称打错，例如中文错别字，英文字母顺序写法、单词拼错。</p></li><li><p>文件路径错误，例如相对路径错误，平台不同路径表示方法不同。</p></li><li><p>IDE中显示在同一目录下并不意味着文件的实际位置也位于同一目录下。</p><img src="/2017/11/14/term-1-11th-week/text.png"><img src="/2017/11/14/term-1-11th-week/conf.png"><p>​</p></li></ol><h2 id="1115"><a href="#1115" class="headerlink" title="1115"></a>1115</h2><h3 id="LPCTSTR"><a href="#LPCTSTR" class="headerlink" title="LPCTSTR"></a>LPCTSTR</h3><blockquote><p>LPCTSTR用来表示你的字符是否使用UNICODE, 如果你的程序定义了UNICODE或者其他相关的宏，那么这个字符或者字符串将被作为UNICODE字符串，否则就是标准的ANSI字符串。</p><p><strong>类型理解</strong></p><p>LPCTSTR类型：<br>L表示long指针 这是为了兼容Windows 3.1等16位操作系统遗留下来的，在win32中以及其他的32位操作系统中， long指针和near指针及far修饰符都是为了兼容的作用。没有实际意义。<br>P表示这是一个指针<br>C表示是一个常量<br>T表示在Win32环境中， 有一个_T宏<br>STR表示这个变量是一个字符串</p></blockquote><h3 id="宏定义中的"><a href="#宏定义中的" class="headerlink" title="宏定义中的#"></a>宏定义中的<code>#</code></h3><p>在github上看到一段<a href="https://github.com/ryanofsky/cfree/blob/f3cdb4d9d179f3e803d5928ce64838f4fe34f850/test.cpp" target="_blank" rel="noopener">代码</a>，使用了一个宏定义，感觉蛮有意思，研究一下它干了些什么。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>::<span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPR(x)  cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; (x) &lt;&lt; endl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  EXPR(<span class="number">2342</span> &gt;&gt; <span class="number">2</span> &amp;&amp; <span class="number">2</span>);</span><br><span class="line">  EXPR((<span class="number">2342</span> &gt;&gt; <span class="number">2</span>) &amp;&amp; <span class="number">2</span>);</span><br><span class="line">  EXPR(<span class="number">2342</span> &gt;&gt; (<span class="number">2</span> &amp;&amp; <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2342 &gt;&gt; 2 &amp;&amp; 2 = 1</span><br><span class="line">(2342 &gt;&gt; 2) &amp;&amp; 2 = 1</span><br><span class="line">2342 &gt;&gt; (2 &amp;&amp; 2) = 1171</span><br></pre></td></tr></table></figure><p>根据输出结果可以看出来：</p><p><code>#x</code>是将x表示的内容转换成字符串，<code>(x)</code>是x执行后的结果。</p><p><strong>Todo: </strong>宏定义中的<code>#, ##, @#, /</code>符号改天专门整理一下。</p><h2 id="1117"><a href="#1117" class="headerlink" title="1117"></a>1117</h2><h3 id="vim替换反斜杠"><a href="#vim替换反斜杠" class="headerlink" title="vim替换反斜杠"></a>vim替换反斜杠</h3><p>由于C语言需要把路径中的<code>\</code>写成<code>\\</code>，使用替换命令<code>:s/\\/\\\\/g</code>时需要进行转义替换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1114&quot;&gt;&lt;a href=&quot;#1114&quot; class=&quot;headerlink&quot; title=&quot;1114&quot;&gt;&lt;/a&gt;1114&lt;/h2&gt;&lt;h3 id=&quot;读取文件失败原因总结&quot;&gt;&lt;a href=&quot;#读取文件失败原因总结&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
      <category term="vim" scheme="https://callmexss.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 10th week</title>
    <link href="https://callmexss.github.io/2017/11/06/term-1-10th-week/"/>
    <id>https://callmexss.github.io/2017/11/06/term-1-10th-week/</id>
    <published>2017-11-06T03:41:28.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1106"><a href="#1106" class="headerlink" title="1106"></a>1106</h2><h3 id="函数对象（函子）"><a href="#函数对象（函子）" class="headerlink" title="函数对象（函子）"></a>函数对象（函子）</h3><blockquote><p> A functor is any object that can be used with () in the manner of a function. This includes normal function names, pointers to functions, and class objects for which the () operator is overloaded—that is, classes for which the peculiar-looking function operator()() is defined. For example, you could define a class like this: </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">float</span> slope; <span class="comment">// 斜率</span></span><br><span class="line">        <span class="keyword">float</span> y0; <span class="comment">// 函数值</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Linear(<span class="keyword">float</span> _sp = <span class="number">1</span>, <span class="keyword">float</span> _y = <span class="number">0</span>)</span><br><span class="line">            : slope(_sp), y0(_y) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">return</span> x * slope + y0; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Linear f1;</span><br><span class="line">    <span class="function">Linear <span class="title">f2</span><span class="params">(<span class="number">2.5</span>, <span class="number">10.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">double</span> y1 = f1(<span class="number">12.4</span>);</span><br><span class="line">    <span class="keyword">double</span> y2 = f2(<span class="number">0.4</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"y1: "</span> &lt;&lt; y1 &lt;&lt; <span class="string">" y2: "</span> &lt;&lt; y2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: functor.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: functor technique</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-06 14:32:18</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-06 14:47:37</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;   // <span class="title">functor</span> <span class="title">class</span> <span class="title">defines</span> <span class="title">operator</span>()()</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">TooBig</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        T cutoff;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        TooBig(<span class="keyword">const</span> T &amp; t) : cutoff(t) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp; v)</span> </span>&#123; <span class="keyword">return</span> v &gt; cutoff; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &amp; li)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ostream_iterator&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; out(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    copy(li.begin(), li.end(), out);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    TooBig&lt;<span class="keyword">int</span>&gt; f100(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; yadayada;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; etcetera;</span><br><span class="line">    <span class="keyword">int</span> vals[<span class="number">10</span>] = &#123;<span class="number">50</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">180</span>, <span class="number">60</span>, <span class="number">210</span>, <span class="number">415</span>, <span class="number">88</span>, <span class="number">188</span>, <span class="number">201</span>&#125;;</span><br><span class="line"></span><br><span class="line">    yadayada.insert(yadayada.begin(), vals, vals+<span class="number">10</span>);</span><br><span class="line">    etcetera.insert(etcetera.begin(), vals, vals+<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Original lists:\n"</span>;</span><br><span class="line">    show(yadayada);</span><br><span class="line">    show(etcetera);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use a named function object</span></span><br><span class="line">    yadayada.remove_if(f100);</span><br><span class="line">    <span class="comment">// construct a function object</span></span><br><span class="line">    etcetera.remove_if(TooBig&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Trimmed lists:\n"</span>;</span><br><span class="line">    show(yadayada);</span><br><span class="line">    show(etcetera);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Original lists:</span><br><span class="line">50 100 90 180 60 210 415 88 188 201</span><br><span class="line">50 100 90 180 60 210 415 88 188 201</span><br><span class="line">Trimmed lists:</span><br><span class="line">50 100 90 60 88</span><br><span class="line">50 100 90 180 60 88 188</span><br></pre></td></tr></table></figure><blockquote><p>Just as the STL defines concepts for containers and iterators, it defines functor concepts:<br>• A generator is a functor that can be called with no arguments.<br>• A unary function is a functor that can be called with one argument.<br>• A binary function is a functor that can be called with two arguments. </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [sqrt(n) for n in gr8]</span></span><br><span class="line">transform(gr8.begin(), gr8.end(), out, <span class="built_in">sqrt</span>);</span><br><span class="line"><span class="comment">// map(lambda x, y: (x+y)/2, gr8, m8)</span></span><br><span class="line">transform(gr8.begin(), gr8.end(), m8.begin(), out, mean);</span><br></pre></td></tr></table></figure><h3 id="QT5-窗体图标不显示"><a href="#QT5-窗体图标不显示" class="headerlink" title="QT5 窗体图标不显示"></a>QT5 窗体图标不显示</h3><p>在csdn上找到了<a href="http://blog.csdn.net/lucky_vip/article/details/22328215" target="_blank" rel="noopener">答案</a>。</p><p>原因是因为路径不正确，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;setWindowIcon(QIcon(<span class="string">":/Image/icon.png"</span>)) <span class="comment">// for linux, if windows, do nothing</span></span><br><span class="line"><span class="keyword">this</span>-&gt;setWindowIcon(QIcon(<span class="string">":\\Image\\icon.png"</span>)); <span class="comment">// show the icon successfully</span></span><br></pre></td></tr></table></figure><h3 id="c-数字转字符串"><a href="#c-数字转字符串" class="headerlink" title="c++ 数字转字符串"></a>c++ 数字转字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">ostringstream</span> ss;</span><br><span class="line">    <span class="keyword">int</span> cheeses;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cheeses;</span><br><span class="line">    ss &lt;&lt; cheeses;</span><br><span class="line">    <span class="comment">// std::string s;</span></span><br><span class="line">    <span class="comment">// s = std::to_string(cheeses);</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"We have "</span> + ss.str() + <span class="string">" varieties of cheese."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在so上面看到一个<a href="https://stackoverflow.com/questions/5590381/easiest-way-to-convert-int-to-string-in-c" target="_blank" rel="noopener">简单的方法</a>，但是在<code>ubuntu</code>下编译出现错误【<code>&#39;to_string&#39; is not a member of &#39;std&#39;</code>】，这是g++编译器的一个著名<a href="https://stackoverflow.com/questions/12975341/to-string-is-not-a-member-of-std-says-g-mingw" target="_blank" rel="noopener">bug</a>。</p><p>以及这就是为啥python好用的原因了…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cheeses = <span class="number">32</span></span><br><span class="line"><span class="comment"># int to string</span></span><br><span class="line">cheeses_s = string(cheeses)</span><br><span class="line"><span class="comment"># string to int</span></span><br><span class="line">cheeses_n = int(cheeses_s)</span><br></pre></td></tr></table></figure><h2 id="1107"><a href="#1107" class="headerlink" title="1107"></a>1107</h2><h3 id="c-primer-plus-5th-第三章复习题笔记"><a href="#c-primer-plus-5th-第三章复习题笔记" class="headerlink" title="c++ primer plus 5th 第三章复习题笔记"></a>c++ primer plus 5th 第三章复习题笔记</h3><p>1.Consider the two C++ statements that follow:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> grade = <span class="number">65</span>;</span><br><span class="line"><span class="keyword">char</span> grade = <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><p>Are they equivalent? </p><p>我以为它俩不相等，实际上是<strong>相等</strong>的。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> i1 = <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">char</span> i2 = <span class="string">'A'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i1 &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">sizeof</span>(i1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i2 &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="keyword">sizeof</span>(i2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (i1 == i2?<span class="string">'y'</span>:<span class="string">'n'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A 1</span><br><span class="line">A 1</span><br><span class="line">y</span><br></pre></td></tr></table></figure><p>看了书中的答案发现被打脸…</p><blockquote><p>The two statements are not really equivalent, although they have the same effect on some systems. Most importantly, the first statement assigns the letter A to grade only on a system using the ASCII code, while the second statement also works for other codes. Second, 65 is a type int constant, whereas ‘A’ is a type char constant. </p></blockquote><hr><p>2.How could you use C++ to find out which character the code 88 represents? Come up with at least two ways.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method 1</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="number">88</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// method 2</span></span><br><span class="line"><span class="built_in">cout</span>.put(<span class="keyword">char</span>(<span class="number">88</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// method 3</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(<span class="number">88</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// method 4</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>) <span class="number">88</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><hr><p>3.Assigning a long value to a float can result in a rounding error. What about assigning long to double?</p><p>书中的答案：</p><blockquote><p>The answer depends on how large the two types are. If long is 4 bytes, there is no loss.<br>That’s because the largest long value would be about 2 billion, which is 10 digits.<br>Because double provides at least 13 significant figures, no rounding would be needed.</p></blockquote><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">3141592653</span>;</span><br><span class="line">    <span class="keyword">float</span> f = i;</span><br><span class="line">    <span class="keyword">double</span> d = i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<em>Ubuntu 16.04 32bit</em>下使用g++编译:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.14159e+09</span><br><span class="line">3.14159e+09</span><br></pre></td></tr></table></figure><p>在<em>win7 64bit</em>下使用vs2017编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-1.15337e+09</span><br><span class="line">-1.15337e+09</span><br><span class="line">// change i to 314159265</span><br><span class="line">3.14159e+08</span><br><span class="line">3.14159e+08</span><br></pre></td></tr></table></figure><p>因此具体是否会出现精度丢失应该视操作系统和编译器而定。</p><h2 id="1109"><a href="#1109" class="headerlink" title="1109"></a>1109</h2><h3 id="cout-格式化输出字符"><a href="#cout-格式化输出字符" class="headerlink" title="cout 格式化输出字符"></a>cout 格式化输出字符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: 3_1.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: inches to feet and inches</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-07 10:58:49</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-07 16:23:34</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> InchesInFoot = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">cout</span>.setf(ios_base::fixed, ios_base::floatfield);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input your height(inches):___"</span> &lt;&lt; <span class="string">"\b\b\b"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; height;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"you're "</span> &lt;&lt; height / InchesInFoot &lt;&lt; <span class="string">" feets, "</span> &lt;&lt; height % InchesInFoot &lt;&lt;<span class="string">" inches"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目要求在下划线上进行输入，因此使用了<code>cout.setf()</code>控制输出格式。该方法有两种重载形式：</p><p><strong>std::ios_base::setf</strong></p><table><thead><tr><th>set (1)</th><th><code>fmtflags setf (fmtflags fmtfl);</code></th></tr></thead><tbody><tr><td><strong>mask (2)</strong></td><td><strong><code>fmtflags setf (fmtflags fmtfl, fmtflags mask);</code></strong></td></tr></tbody></table><blockquote><p>Set specific format flags</p><p>The first form <em>(1)</em> sets the stream’s <em>format flags</em> whose bits are set in fmtfl, leaving unchanged the rest, as if a call to <code>flags(fmtfl|flags())</code>.<br>The second form <em>(2)</em> sets the stream’s <em>format flags</em> whose bits are set in both fmtfl and mask, and clears the <em>format flags</em> whose bits are set in mask but not in fmtfl, as if a call to <code>flags((fmtfl&amp;mask)|(flags()&amp;~mask))</code>.<br>Both return the value of the stream’s <em>format flags</em> before the call.<br>The format flags of a stream affect the way data is interpreted in certain input functions and how it is written by certain output functions. See <a href="http://www.cplusplus.com/ios_base::fmtflags" target="_blank" rel="noopener">ios_base::fmtflags</a> for the possible values of this function’s arguments.</p></blockquote><h2 id="1110"><a href="#1110" class="headerlink" title="1110"></a>1110</h2><h3 id="c-数组初始化"><a href="#c-数组初始化" class="headerlink" title="c++ 数组初始化"></a>c++ 数组初始化</h3><p>只有在定义数组的时候才能使用形式：<code>tpye typeName[size]; or tpye typeName[size] = {};</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cards[<span class="number">4</span>] = &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;; <span class="comment">// okay</span></span><br><span class="line"><span class="keyword">int</span> hand[<span class="number">4</span>]; <span class="comment">// okay</span></span><br><span class="line">hand[<span class="number">4</span>] = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>&#125;; <span class="comment">// not allowed</span></span><br><span class="line">hand = cards; <span class="comment">// not allowed</span></span><br></pre></td></tr></table></figure><p>初始化数组时，可以提供比数组元素更少的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> hotelTips[<span class="number">5</span>] = &#123;<span class="number">5.0</span>, <span class="number">2.5</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果部分初始化一个数组，编译器会将剩余的元素设置为零。例如，想要生成一个全0的数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> allZero[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// all zero but the first one to be 1</span></span><br><span class="line"><span class="keyword">int</span> allZeroExceptFirst[<span class="number">10</span>] = &#123;<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果初始化数组时<code>[]</code>中没有填写数组大小，c++编译器会完成这个工作，它会统计数组中元素的个数。通常是不建议使用这种初始化方法的，但是初始化一个字符数组并将其转化为字符串是安全（后面会讲）。可以用以下代码测试编译器是否进行了这个工作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> things[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num_elements = <span class="keyword">sizeof</span> things / <span class="keyword">sizeof</span>(<span class="keyword">short</span>);</span><br><span class="line">    <span class="built_in">cout</span>.setf(ios_base::boolalpha);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (num_elements == <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output is "true"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1106&quot;&gt;&lt;a href=&quot;#1106&quot; class=&quot;headerlink&quot; title=&quot;1106&quot;&gt;&lt;/a&gt;1106&lt;/h2&gt;&lt;h3 id=&quot;函数对象（函子）&quot;&gt;&lt;a href=&quot;#函数对象（函子）&quot; class=&quot;headerlink&quot; title=&quot;函
      
    
    </summary>
    
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
      <category term="qt5" scheme="https://callmexss.github.io/tags/qt5/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 9th week</title>
    <link href="https://callmexss.github.io/2017/10/31/term-1-9th-week/"/>
    <id>https://callmexss.github.io/2017/10/31/term-1-9th-week/</id>
    <published>2017-10-31T11:55:33.000Z</published>
    <updated>2019-03-28T13:35:20.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1031"><a href="#1031" class="headerlink" title="1031"></a>1031</h2><h3 id="c-中迭代器的种类"><a href="#c-中迭代器的种类" class="headerlink" title="c++中迭代器的种类"></a>c++中迭代器的种类</h3><p><code>input iterator</code> ：只能从头至尾遍历一次，因为在遍历过程中，指针的指向可能会变化，只用于读取容器中的数据，通常用于只需要遍历一次的、只读算法。</p><p><code>output iterator</code>： 同样也只能从头至尾遍历一次，可以在不读取数据的情况下直接写入数据，通常用于只遍历一次的只写算法。</p><p><code>forward iterator</code>： 遍历过程中不改变指针指向，可以用于多次的顺序遍历，支持读写数据。</p><p><code>bidirectional iterator</code>： 拥有<strong>forward iterator</strong>迭代器的全部功能，支持双向遍历。</p><p><code>random access iterator</code>：拥有<strong>bidirectional iterator</strong>迭代器的全部功能，支持随机访问，适用于排序、二分查找等需要随机存取的算法。</p><h3 id="python-使用-pickle-序列化对象"><a href="#python-使用-pickle-序列化对象" class="headerlink" title="python 使用 pickle 序列化对象"></a>python 使用 pickle 序列化对象</h3><p>之前一直想使用 <code>pickle</code> 存取python对象，今天写了个脚本恰好需要使用，就借着这个机会简单记录一下其使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字典</span></span><br><span class="line">words = &#123;<span class="string">"hello"</span>:<span class="number">5</span>, <span class="string">"world"</span>:<span class="number">5</span>, <span class="string">"python"</span>:<span class="number">6</span>, <span class="string">"c++"</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 使用pickle序列化words并存储</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"wd.pickle"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="comment"># 第一个参数是需要序列化的对象，第二个参数是序列化对象存储的文件</span></span><br><span class="line">  pickle.dump(words, f)</span><br><span class="line">  <span class="comment"># 脚本执行后会在其所在文件夹建立wd.pickle文件，使用cat 命令查看：</span></span><br><span class="line">  <span class="comment"># output:</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  (dp0</span></span><br><span class="line"><span class="string">  S'python'</span></span><br><span class="line"><span class="string">  p1</span></span><br><span class="line"><span class="string">  I6</span></span><br><span class="line"><span class="string">  sS'world'</span></span><br><span class="line"><span class="string">  p2</span></span><br><span class="line"><span class="string">  I5</span></span><br><span class="line"><span class="string">  sS'hello'</span></span><br><span class="line"><span class="string">  p3</span></span><br><span class="line"><span class="string">  I5</span></span><br><span class="line"><span class="string">  sS'c++'</span></span><br><span class="line"><span class="string">  p4</span></span><br><span class="line"><span class="string">  I3</span></span><br><span class="line"><span class="string">  s.r</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line">  <span class="comment"># 还可以使用第三个参数选择加密算法（可选）</span></span><br><span class="line">  <span class="comment"># 例如：</span></span><br><span class="line">  <span class="comment"># pickle.dump(words, f, 1)</span></span><br><span class="line">  <span class="comment"># cat wd.pickle</span></span><br><span class="line">  <span class="comment"># &#125;q(UaqKUbqKu.</span></span><br><span class="line"><span class="comment"># 使用pickle读取文件并将其内容转化为python对象</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'wd.pickle'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  data = pickle.load(f)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># &#123;'world': 5, 'c++': 3, 'hello': 5, 'python': 6&#125;</span></span><br></pre></td></tr></table></figure><h3 id="迭代器继承"><a href="#迭代器继承" class="headerlink" title="迭代器继承"></a>迭代器继承</h3><p>根据上面介绍的5中迭代器，可以看出来它们之间是有继承关系的。各个迭代器功能如下表所示(i for iterator, n is an integer)：</p><table><thead><tr><th style="text-align:center">iterator capacity</th><th style="text-align:center">input iterator</th><th style="text-align:center">output iterator</th><th style="text-align:center">forward iterator</th><th style="text-align:center">bidirectional iterator</th><th style="text-align:center">random access iterator</th></tr></thead><tbody><tr><td style="text-align:center">Dereferencing read</td><td style="text-align:center">Yes</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">Dereferencing write</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">Fixed and repeatable order</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i++    ++i</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i–    –i</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i[n]</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i + n</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i - n</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i += n</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr><tr><td style="text-align:center">i -= n</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">No</td><td style="text-align:center">Yes</td></tr></tbody></table><h2 id="1101"><a href="#1101" class="headerlink" title="1101"></a>1101</h2><h3 id="一个关于-vector-构造函数的坑"><a href="#一个关于-vector-构造函数的坑" class="headerlink" title="一个关于 vector 构造函数的坑"></a>一个关于 vector 构造函数的坑</h3><p>c++ primer 书中介绍<code>copy()</code>函数时举了下面这个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> casts[<span class="number">10</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span> ,<span class="number">4</span> , <span class="number">11</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dice[<span class="number">10</span>];</span><br><span class="line">copy(casts, casts + <span class="number">10</span>, dice.begin()); <span class="comment">// copy array to vector</span></span><br></pre></td></tr></table></figure><p>在Ubuntu环境下编译该代码出现如下错误：</p><p><code>request for member which is of non-class type</code></p><p>原因是 vector 初始化的问题，vector 应该使用构造函数初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no argument</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dice;</span><br><span class="line"><span class="comment">// has an argument to define the size of the vector</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dice(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>再进行编译就没有个这个错误了。</p><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> casts[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dice(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// The first two iterator arguments to copy() represent a</span></span><br><span class="line">    <span class="comment">// range to be copied, and the final iterator argument </span></span><br><span class="line">    <span class="comment">// represents the location to which the first item is copied.</span></span><br><span class="line">    copy(casts, casts + <span class="number">10</span>, dice.begin());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    it = dice.begin();</span><br><span class="line">    <span class="keyword">for</span>(;it != dice.end();it++)</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copy-ostream-iterator-istream-iterator"><a href="#copy-ostream-iterator-istream-iterator" class="headerlink" title="copy(), ostream_iterator, istream_iterator"></a>copy(), ostream_iterator, istream_iterator</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: copyit.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: copy(), iostream, reverse iterator</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-01 22:07:55</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-01 22:45:13</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cast[<span class="number">10</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dice(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// copy from array to vector</span></span><br><span class="line">    copy(cast, cast+<span class="number">10</span>, dice.begin());</span><br><span class="line">    <span class="built_in">std</span>::ostream_iterator&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; out_iter(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    copy(dice.begin(), dice.end(), out_iter);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// reverse it</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reverse implicitly: "</span>;</span><br><span class="line">    copy(dice.rbegin(), dice.rend(), out_iter);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reverse explicitly: "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator ri;</span><br><span class="line">    <span class="keyword">for</span>(ri = dice.rbegin(); ri != dice.rend(); ri++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *ri &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; special(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 未知错误...</span></span><br><span class="line"><span class="comment">    copy(std::istream_iterator&lt;int, char&gt;(std::cin),</span></span><br><span class="line"><span class="comment">         std::istream_iterator&lt;int, char&gt;(), special);</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; "before reverse: ";</span></span><br><span class="line"><span class="comment">    copy(special.begin(), special.end(), out_iter);</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; "after reverse: ";</span></span><br><span class="line"><span class="comment">    copy(special.rbegin(), special.rend(), out_iter);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line">...</span><br><span class="line">ostream_iterator&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; out_iter(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You could use the iterator like this</span></span><br><span class="line">*out_iter++ = <span class="number">15</span>; <span class="comment">// works like cout &lt;&lt; 15 &lt;&lt; “ “;</span></span><br></pre></td></tr></table></figure><blockquote><p>The out_iter iterator now becomes an interface that allows you to use cout to display information. The first template argument (int, in this case) indicates the data type being sent to the output stream. The second template argument (char, in this case) indicates the character type used by the output stream. (Another possible value would be wchar_t.) The first constructor argument (cout, in this case) identifies the output stream being used. It could also be a stream used for file output. The final character string argument is a separator to be displayed after each item sent to the output stream.</p></blockquote><h2 id="1102"><a href="#1102" class="headerlink" title="1102"></a>1102</h2><h3 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: insert.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: insert iterator</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-02 20:48:44</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-02 21:03:20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="built_in">string</span> s1[] = &#123;<span class="string">"python"</span>, <span class="string">"c++"</span>, <span class="string">"java"</span>, <span class="string">"c#"</span>, <span class="string">"html"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> s2[] = &#123;<span class="string">"network"</span>, <span class="string">"system"</span>, <span class="string">"automatic"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> s3[] = &#123;<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>&#125;;</span><br><span class="line">    <span class="comment">// 如果有拷贝操作，一定要先使用构造函数初始化，否则会Segmentation fault</span></span><br><span class="line">    <span class="comment">// that is, if:</span></span><br><span class="line">    <span class="comment">// vector&lt;string&gt; words;</span></span><br><span class="line">    <span class="comment">// copy(s1, s1+5, words.begin());</span></span><br><span class="line">    <span class="comment">// than:</span></span><br><span class="line">    <span class="comment">// Segmentation fault</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words(<span class="number">5</span>); </span><br><span class="line">    copy(s1, s1+<span class="number">5</span>, words.begin());</span><br><span class="line">    ostream_iterator&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"init: "</span>;</span><br><span class="line">    copy(words.begin(), words.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"back_insert: "</span>;</span><br><span class="line">    <span class="comment">// there must be writen like this: </span></span><br><span class="line">    <span class="comment">// back_insert_iterator&lt;vector&lt;T&gt; &gt; (something));</span></span><br><span class="line">    copy(s2, s2+<span class="number">3</span>, back_insert_iterator&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; (words));</span><br><span class="line">    copy(words.begin(), words.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"insert: "</span>;</span><br><span class="line">    copy(s3, s3+<span class="number">2</span>, insert_iterator&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;(words, words.begin()));</span><br><span class="line">    copy(words.begin(), words.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init: python c++ java c# html</span><br><span class="line">back_insert: python c++ java c# html network system automatic</span><br><span class="line">insert: Tom Jerry python c++ java c# html network system automatic</span><br></pre></td></tr></table></figure><h3 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h3><blockquote><p>That means when a container expires, so do the data stored in the container. (However, if the data is pointers, the pointed-to data does not necessarily expire.)</p></blockquote><p>so后面的部分省略了动词<em>expires</em>，整句话的翻译为：</p><p>这意味伴随着一个容器的终止，容器中存储的数据也随之终止了。(然而如果其中的数据是指针，这些指针指向的数据不必被终止。)</p><h3 id="STL-容器"><a href="#STL-容器" class="headerlink" title="STL 容器"></a>STL 容器</h3><p>STL容器：<code>list, quene, deque, priority_quene, stack, vector, map, multimap, set, multiset, biset</code></p><blockquote><p> In the table, X represents a container type, such as vector, T represents the type of object stored in the container, a and b represent values of type X, and u represents an identifier of type X. </p></blockquote><table><thead><tr><th style="text-align:left">Expression</th><th>Return Type</th><th>Description</th><th>Complexity</th></tr></thead><tbody><tr><td style="text-align:left">X::iterator</td><td>Iterator type point to T</td><td>Any iterator category except                                               output iterator</td><td>Compile time</td></tr><tr><td style="text-align:left">X::value_type</td><td>T</td><td>The type for <strong>T</strong></td><td>Compile time</td></tr><tr><td style="text-align:left">X u;</td><td></td><td>Creates 0-size container called <strong>u</strong></td><td>Constant</td></tr><tr><td style="text-align:left">X();</td><td></td><td>Creates 0-size anonymous container</td><td>Constant</td></tr><tr><td style="text-align:left">X u(a);</td><td></td><td>Copy constructor</td><td>Linear</td></tr><tr><td style="text-align:left">X u = a;</td><td></td><td>Same effect as <strong>X u(a);</strong></td><td></td></tr><tr><td style="text-align:left">(&amp;a)-&gt;~X();</td><td>void</td><td>Applies destructor to every                                           element of a container</td><td>Linear</td></tr><tr><td style="text-align:left">a.begin()</td><td>iterator</td><td>Returns an iterator referring                                                to the first element of  the container</td><td>Constant</td></tr><tr><td style="text-align:left">a.end()</td><td>iterator</td><td>Returns an iterator that                                                         is a past-the-end value</td><td>Constant</td></tr><tr><td style="text-align:left">a.size()</td><td>unsigned integral  type</td><td>Returns number of elements                                        equal to <strong>a.end()</strong> - <strong>a.begin()</strong></td><td>Constant</td></tr><tr><td style="text-align:left">a.swap(b)</td><td>void</td><td>Swaps contents of a and b</td><td>Constant</td></tr><tr><td style="text-align:left">a == b</td><td>convertible to bool</td><td>Returns <strong>true</strong> if a and b                                                     have the same size and each                                       element in a is equivalent to                                              (== is true) the corresponding                                   element in b</td><td>Linear</td></tr><tr><td style="text-align:left">a != b</td><td>convertible to bool</td><td>Returns !(a == b)</td><td>Linear</td></tr></tbody></table><h2 id="1103"><a href="#1103" class="headerlink" title="1103"></a>1103</h2><h3 id="vim-常用技巧"><a href="#vim-常用技巧" class="headerlink" title="vim 常用技巧"></a>vim 常用技巧</h3><p><a href="http://54rd.net/html/2015/shell_0104/10.html" target="_blank" rel="noopener">vim替换操作</a></p><h3 id="c-namespace-问题"><a href="#c-namespace-问题" class="headerlink" title="c++ namespace 问题"></a>c++ namespace 问题</h3><p>写了一个函数，用来输出列表元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &amp;li, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ostream_iterator&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"list "</span> + name + <span class="string">": "</span>;</span><br><span class="line">    copy(li.begin(), li.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出现如下错误：</p><p><code>variable or field declared void</code></p><p>万能的<strong>Stack Overflow</strong>告诉我是因为没有加<code>using namespace std;</code></p><blockquote><p> <a href="https://stackoverflow.com/questions/364209/variable-or-field-declared-void" target="_blank" rel="noopener">C++ Standard library classes are within the namespace <code>std::</code>.</a></p></blockquote><h3 id="STL-list"><a href="#STL-list" class="headerlink" title="STL: list"></a>STL: list</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: onest.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: some list methods</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-03 10:44:30</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-03 12:03:54</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; &amp;li, <span class="built_in">string</span> name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ostream_iterator&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"list "</span> + name + <span class="string">": "</span>;</span><br><span class="line">    copy(li.begin(), li.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; one(<span class="number">5</span>, <span class="number">2</span>); <span class="comment">// this means 2 2 2 2 2</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; two(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">    two.insert(two.begin(), num, num+<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; three(two);</span><br><span class="line">    <span class="keyword">int</span> more[<span class="number">3</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    three.insert(three.end(), more, more+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    show(one, <span class="string">"one"</span>);</span><br><span class="line">    show(two, <span class="string">"two"</span>);</span><br><span class="line">    show(three, <span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">    three.remove(<span class="number">1</span>);</span><br><span class="line">    println(<span class="string">"after remove 1:"</span>);</span><br><span class="line">    show(three, <span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">    three.splice(three.begin(), one);</span><br><span class="line">    println(<span class="string">"list three after splice: "</span>);</span><br><span class="line">    show(three, <span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">    one.unique();</span><br><span class="line">    println(<span class="string">"after unique: "</span>);</span><br><span class="line">    show(one, <span class="string">"one"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"before operation on list two: "</span>);</span><br><span class="line">    show(two, <span class="string">"two"</span>);</span><br><span class="line">    two.sort();</span><br><span class="line">    two.unique();</span><br><span class="line">    println(<span class="string">"after sort&amp;unique: "</span>);</span><br><span class="line">    show(two, <span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line">    three.merge(two);</span><br><span class="line">    println(<span class="string">"after merge"</span>);</span><br><span class="line">    show(two, <span class="string">"two"</span>);</span><br><span class="line">    show(three, <span class="string">"three"</span>);</span><br><span class="line">    println(<span class="string">"unique it!"</span>);</span><br><span class="line">    three.unique();</span><br><span class="line">    show(three, <span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1104"><a href="#1104" class="headerlink" title="1104"></a>1104</h2><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p>集合类定义在<code>set</code>中，集合中没有重复元素，集合有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: setops.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: some set operations</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-04 18:23:37</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-04 20:00:16</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">string</span> str, <span class="keyword">const</span> <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ostream_iterator&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"set "</span> &lt;&lt; str &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">    copy(s.begin(), s.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">string</span> s1[N] = &#123;<span class="string">"buffoon"</span>, <span class="string">"thinkers"</span>, <span class="string">"for"</span>, <span class="string">"heavy"</span>, <span class="string">"can"</span>, <span class="string">"for"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> s2[N] = &#123;<span class="string">"metal"</span>, <span class="string">"any"</span>, <span class="string">"food"</span>, <span class="string">"elegant"</span>, <span class="string">"deliver"</span>,<span class="string">"for"</span>&#125;;</span><br><span class="line">    ostream_iterator&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; out(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; A(s1, s1+N);</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; B(s2, s2+N);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show set elements</span></span><br><span class="line">    show(<span class="string">"A"</span>, A);</span><br><span class="line">    show(<span class="string">"B"</span>, B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// union</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Union of A and B:\n"</span>;</span><br><span class="line">    set_union(A.begin(), A.end(), B.begin(), B.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Intersection</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Intersection of A and B:\n"</span>;</span><br><span class="line">    set_intersection(A.begin(), A.end(), B.begin(), B.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Difference</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Difference of A and B:\n"</span>;</span><br><span class="line">    set_difference(A.begin(), A.end(), B.begin(), B.end(), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; C;</span><br><span class="line">    set_union(A.begin(), A.end(), B.begin(), B.end(), insert_iterator&lt;<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; &gt;(C,           C.begin()));</span><br><span class="line">    show(<span class="string">"C"</span>, C);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"grungy"</span>)</span></span>;</span><br><span class="line">    C.insert(s3);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after insection, "</span>;</span><br><span class="line">    show(<span class="string">"C"</span>, C);</span><br><span class="line"></span><br><span class="line">    C.insert(<span class="string">"super"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Showing a range:\n"</span>;</span><br><span class="line">    <span class="comment">// [g*, s*)</span></span><br><span class="line">    copy(C.lower_bound(<span class="string">"ghost"</span>), C.upper_bound(<span class="string">"spook"</span>), out);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">set A: buffoon can for heavy thinkers</span><br><span class="line">set B: any deliver elegant food for metal</span><br><span class="line">Union of A and B:</span><br><span class="line">any buffoon can deliver elegant food for heavy metal thinkers</span><br><span class="line">Intersection of A and B:</span><br><span class="line">for</span><br><span class="line">Difference of A and B:</span><br><span class="line">buffoon can heavy thinkers</span><br><span class="line">set C: any buffoon can deliver elegant food for heavy metal thinkers</span><br><span class="line">after insection, set C: any buffoon can deliver elegant food for grungy heavy metal thinkers</span><br><span class="line">Showing a range:</span><br><span class="line">grungy heavy metal</span><br></pre></td></tr></table></figure><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><p><code>set, map</code>中键值唯一，<code>multiset, multimap</code>中一个键可以对应多个值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: multimap.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: use a multimap</span></span><br><span class="line"><span class="comment"> *        Create: 2017-11-04 20:20:42</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-11-04 21:46:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">const</span> KeyType, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; Pair;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">multimap</span>&lt;KeyType, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; MapCode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> code, <span class="built_in">std</span>::<span class="built_in">multimap</span>&lt;KeyType, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; &amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Number of cities with area code "</span> &lt;&lt; code &lt;&lt; <span class="string">": "</span></span><br><span class="line">         &lt;&lt; m.count(code) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    MapCode codes;</span><br><span class="line"></span><br><span class="line">    codes.insert(Pair(<span class="number">415</span>, <span class="string">"San Francisco"</span>));</span><br><span class="line">    codes.insert(Pair(<span class="number">510</span>, <span class="string">"Oakland"</span>));</span><br><span class="line">    codes.insert(Pair(<span class="number">718</span>, <span class="string">"Brooklyn"</span>));</span><br><span class="line">    codes.insert(Pair(<span class="number">718</span>, <span class="string">"Staten Island"</span>));</span><br><span class="line">    codes.insert(Pair(<span class="number">415</span>, <span class="string">"San Rafael"</span>));</span><br><span class="line">    codes.insert(Pair(<span class="number">510</span>, <span class="string">"Berkely"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> code_num[<span class="number">4</span>] = &#123;<span class="number">415</span>, <span class="number">510</span>, <span class="number">571</span>, <span class="number">718</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        show(code_num[i], codes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first, second</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Area Code City\n"</span>;</span><br><span class="line">    MapCode::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = codes.begin(); it != codes.end(); ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">"   "</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range</span></span><br><span class="line">    pair&lt;MapCode::iterator, MapCode::iterator&gt; range = codes.equal_range(<span class="number">718</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Cities with area code 718:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = range.first; it != range.second; ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (*it).second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1031&quot;&gt;&lt;a href=&quot;#1031&quot; class=&quot;headerlink&quot; title=&quot;1031&quot;&gt;&lt;/a&gt;1031&lt;/h2&gt;&lt;h3 id=&quot;c-中迭代器的种类&quot;&gt;&lt;a href=&quot;#c-中迭代器的种类&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="English" scheme="https://callmexss.github.io/tags/English/"/>
    
      <category term="python" scheme="https://callmexss.github.io/tags/python/"/>
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
      <category term="vim" scheme="https://callmexss.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>term 1: 8th week</title>
    <link href="https://callmexss.github.io/2017/10/27/term-1-8th-week/"/>
    <id>https://callmexss.github.io/2017/10/27/term-1-8th-week/</id>
    <published>2017-10-27T11:22:36.000Z</published>
    <updated>2019-03-28T13:35:20.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1027"><a href="#1027" class="headerlink" title="1027"></a>1027</h2><h3 id="关于-for-循环的作用域"><a href="#关于-for-循环的作用域" class="headerlink" title="关于 for 循环的作用域"></a>关于 for 循环的作用域</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// define two vector to store titles and ratings</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ratings(NUM);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; titles(NUM);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hint</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"please input the info(titles,ratings between 0 to 10) of \n"</span></span><br><span class="line">         &lt;&lt; NUM &lt;&lt; <span class="string">" books.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assignment</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The title of the "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" book: "</span>;</span><br><span class="line">        getline(<span class="built_in">cin</span>, titles[i]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The rating(0-10) of the book: "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ratings[i];</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print info</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Thank u. You enter the following:\n"</span></span><br><span class="line">         &lt;&lt; <span class="string">"Rating\tBook\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; titles[i] &lt;&lt; <span class="string">"\t"</span> &lt;&lt; ratings[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译该c++程序时出现如下错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vect1.cpp: In function ‘int main(int, const char**)’:</span><br><span class="line">vect1.cpp:<span class="number">32</span>:<span class="number">10</span>: error: name lookup of ‘i’ changed <span class="keyword">for</span> ISO ‘<span class="keyword">for</span>’ scoping [-fpermissive]</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">          ^</span><br><span class="line">vect1.cpp:<span class="number">32</span>:<span class="number">10</span>: note: (<span class="keyword">if</span> you use ‘-fpermissive’ G++ will accept your code)</span><br></pre></td></tr></table></figure><p>出错原因是当前的g++编译器中 <code>for</code> 循环的作用域是当前 <code>for</code>循环，所以上面定义的<code>int i = 0</code>在下面的<code>for</code>循环中是无法使用的，需要重新定义变量<code>i</code>。也可以按照提示中更改g++编译器参数来忽略该错误。</p><h3 id="c-从控制台读入多个参数"><a href="#c-从控制台读入多个参数" class="headerlink" title="c++从控制台读入多个参数"></a>c++从控制台读入多个参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; scores;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;::iterator pd; <span class="comment">// pd is an iterator</span></span><br><span class="line">  <span class="keyword">double</span> temp;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Read multiple parameters from the console</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; temp &amp;&amp; temp &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//  this method adds an element to the end of a vector.</span></span><br><span class="line">  scores.push_back(temp); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (pd = socres.begin(); pd &lt; socres.end(); pd++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the score is "</span> &lt;&lt; *pd &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><blockquote><p>It’s important that you understand how the STL defines ranges using two iterators. The first iterator refers to the beginning of the range, and the second iterator is one beyond the end of the range. For example, </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.erase(scores.begin(), scores.begin() + <span class="number">2</span>); <span class="comment">// erase scores.begin(), scores.begin()+1</span></span><br></pre></td></tr></table></figure><blockquote><p>Remember<br>A range [it1, it2) is specified by two iterators it1 and it2, and it runs from it1 up to, but not including it2 </p></blockquote><p> vector 中两个迭代器<strong>it1</strong>和<strong>it2</strong>的作用范围和 python 中range方法相同，均为左闭右开区间<strong>[it1, it2)</strong>。</p><p><img src="stl_range.png" alt></p><p>下面的代码展示了 vector 模板类提供方法（begin(), end(), size(), erase(), push_back(), swap(), insert()）的使用样例：：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      Filename: vect2.cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *        Author: xss - callmexss@126.com</span></span><br><span class="line"><span class="comment"> *   Description: methods and iterators</span></span><br><span class="line"><span class="comment"> *        Create: 2017-10-27 15:54:09</span></span><br><span class="line"><span class="comment"> * Last Modified: 2017-10-27 16:33:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Review</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> title;</span><br><span class="line">    <span class="keyword">int</span> rating;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FillReview</span><span class="params">(Review &amp; rr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowReview</span><span class="params">(<span class="keyword">const</span> Review &amp; rr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Review&gt; books;</span><br><span class="line">    Review temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert info</span></span><br><span class="line">    <span class="keyword">while</span>(FillReview(temp))</span><br><span class="line">        books.push_back(temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = books.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Thank u. u enter the following: \n"</span></span><br><span class="line">             &lt;&lt; <span class="string">"Rating\tBook\n"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.size(); i++)</span><br><span class="line">            ShowReview(books[i]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Reprinting: \n"</span></span><br><span class="line">             &lt;&lt; <span class="string">"Rating\tBook\n"</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Review&gt;::iterator pr;</span><br><span class="line">        <span class="keyword">for</span> (pr = books.begin(); pr != books.end(); pr++)</span><br><span class="line">            ShowReview(*pr);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;Review&gt; oldlist(books); <span class="comment">// copy constructor used</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// remove 2 items</span></span><br><span class="line">            books.erase(books.begin()+<span class="number">1</span>, books.begin()+<span class="number">3</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"After erasing:\n"</span>;</span><br><span class="line">            <span class="keyword">for</span> (pr = books.begin(); pr != books.end(); pr++)</span><br><span class="line">                ShowReview(*pr);</span><br><span class="line">            <span class="comment">// insert 1 item</span></span><br><span class="line">            books.insert(books.begin(), oldlist.begin()+<span class="number">1</span>, oldlist.begin()+<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"After insertion: \n"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.size(); i++)</span><br><span class="line">                ShowReview(books[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        books.swap(oldlist);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Swapping oldlist with books:\n"</span>;</span><br><span class="line">        <span class="keyword">for</span> (pr = books.begin(); pr != books.end(); pr++)</span><br><span class="line">            ShowReview(*pr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"nothing entered, nothing gained.\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FillReview</span><span class="params">(Review &amp; rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter book title(quit to quit): "</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, rr.title);</span><br><span class="line">    <span class="keyword">if</span> (rr.title == <span class="string">"quit"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter book rating: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; rr.rating;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cin</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowReview</span><span class="params">(<span class="keyword">const</span> Review &amp; rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rr.rating &lt;&lt; <span class="string">"\t"</span> &lt;&lt; rr.title &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Enter book title(quit to quit): python cookbook</span><br><span class="line">Enter book rating: 10</span><br><span class="line">Enter book title(quit to quit): c++ primer</span><br><span class="line">Enter book rating: 10</span><br><span class="line">Enter book title(quit to quit): think in java</span><br><span class="line">Enter book rating: 8</span><br><span class="line">Enter book title(quit to quit): algorithm</span><br><span class="line">Enter book rating: 8</span><br><span class="line">Enter book title(quit to quit): head first in js</span><br><span class="line">Enter book rating: 6</span><br><span class="line">Enter book title(quit to quit): quit</span><br><span class="line">Thank u. u enter the following:</span><br><span class="line">Rating  Book</span><br><span class="line">10      python cookbook</span><br><span class="line">10      c++ primer</span><br><span class="line">8       think in java</span><br><span class="line">8       algorithm</span><br><span class="line">6       head first in js</span><br><span class="line">Reprinting:</span><br><span class="line">Rating  Book</span><br><span class="line">10      python cookbook</span><br><span class="line">10      c++ primer</span><br><span class="line">8       think in java</span><br><span class="line">8       algorithm</span><br><span class="line">6       head first in js</span><br><span class="line">After erasing:</span><br><span class="line">10      python cookbook</span><br><span class="line">8       algorithm</span><br><span class="line">6       head first in js</span><br><span class="line">After insertion:</span><br><span class="line">10      c++ primer</span><br><span class="line">10      python cookbook</span><br><span class="line">8       algorithm</span><br><span class="line">6       head first in js</span><br><span class="line">Swapping oldlist with books:</span><br><span class="line">10      python cookbook</span><br><span class="line">10      c++ primer</span><br><span class="line">8       think in java</span><br><span class="line">8       algorithm</span><br><span class="line">6       head first in js</span><br></pre></td></tr></table></figure><h3 id="错题本"><a href="#错题本" class="headerlink" title="错题本"></a>错题本</h3><p>以下选项中不属于C语言程序运算符的是？</p><p>A. sizeof<br>B. &lt; &gt;<br>C. ( )<br>D. &amp;&amp;</p><p>正确答案: B   我的答案: A (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12117316&amp;qid=4766#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p>C的运算符有以下几类：<br>1.算术运算符：* - + /<br>2.关系运算符： &gt; &lt; == != &gt;= &lt;=<br>3.逻辑运算符：! &amp;&amp; ||<br>4.位运算符：&lt;&lt; &gt;&gt; ~ | ^ &amp;<br>5.赋值运算符：=及扩展赋值运算符<br>6.条件运算符：?:<br>7.逗号运算符：,<br>8.指针运算符：*和&amp;<br>9.求字节数运算符：sizeof<br>10.强制类型转换运算符：(类型)<br>11.分量运算符：. -&gt;<br>12.下标运算符：[ ]<br>13.其他：如函数调用运算符:()<br>注意：条件运算符是C语言中惟一一个三目(三元)运算符</p></blockquote><hr><blockquote><p><strong>重载</strong>：</p><p>   只有在同一类定义中的同名成员函数才存在重载关系 ，主要特点是<strong>函数的参数类型和数目有所不同</strong>，但<strong>不能出现函数参数的个数和类型均相同</strong>，仅仅依靠返回值类型不同来区分的函数，这和普通函数的重载是完全一致的。另外，重载和成员函数是否是虚函数无关</p><p><strong>覆盖</strong>：<br>   在派生类中覆盖基类中的同名函数，要求两个函数的参数个数、参数类型、返回类型都相同，且基类函数必须是虚函数。</p><p><strong>隐藏</strong>：<br>   派生类中的函数屏蔽了基类中的同名函数，2个函数参数相同，但基类函数不是虚函数（和覆盖的区别在于基类函数是否是虚函数）。2个函数参数不同，无论基类函数是否是虚函数，基类函数都会被屏蔽（和重载的区别在于两个函数不在同一类中）。</p></blockquote><hr><p>下面有关malloc和new，说法错误的是？ </p><p>A. new 建立的是一个对象， malloc分配的是一块内存.<br>B. new初始化对象，调用对象的构造函数，对应的delete调用相应的析构函数，malloc仅仅分配内存，free仅仅回收内存.<br>C. new和malloc都是保留字，不需要头文件支持.<br>D. new和malloc都可用于申请动态内存，new是一个操作符，malloc是是一个函数.</p><p>正确答案: C   我的答案: A (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12117316&amp;qid=15408#summary" target="_blank" rel="noopener">解析</a>：</p><blockquote><p>new/delete都是要分两步操作的：new分配内存，并且调用对象的构造函数初始化一个对象；delete调用相应的析构函数，然后释放内存<br>malloc/free只是分配内存/回收内存， 所以A、B对；<br>malloc需要头文件”stdlib.h”或者”malloc.h” C错；<br>new/delete都是内建的操作符，而malloc是一个函数，其函数原型是：<br><code>void *malloc(unsigned int num_bytes);</code></p></blockquote><hr><p>以下选项中不属于C语言标识符的是？</p><p>A. 常量<br>B. 用户标识符<br>C. 关键字<br>D. 预定义标识符</p><p>正确答案: A   我的答案: C (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12117316&amp;qid=4752#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p><strong>C语言中的标识符有：关键字、预定义标识符、用户标识符</strong></p></blockquote><hr><p>下面不是面向对象的基本原则的是？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A. 单一职责原则（Single-Resposibility Principle）</span><br><span class="line">B. 开放封闭原则（Open-Closed principle）</span><br><span class="line">C. 抽象类原则（Abstract-Class principle）</span><br><span class="line">D. 依赖倒置原则（Dependecy-Inversion Principle）</span><br><span class="line">E. 接口隔离原则（Interface-Segregation Principle）</span><br></pre></td></tr></table></figure><p>正确答案: C   我的答案: E (错误)</p><p><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design" target="_blank" rel="noopener">解析</a>):</p><blockquote><p>s( Single-Resposibility Principle ): 单一职责原则<br>o( Open-Closed principle ): 开放封闭原则<br>l( Liskov-Substituion Principle ): 里氏原则<br>i( Interface-Segregation Principle ): 接口隔离原则<br>d( Dependecy-Inversion Principle ): 依赖倒置原则</p></blockquote><table><thead><tr><th>Initial</th><th>Concept</th></tr></thead><tbody><tr><td>S</td><td>Single responsibility principle: “a class should have only a single responsibility” <em>(i.e. changes to only one part of the software’s specification should be able to affect the specification of the class)</em></td></tr><tr><td>O</td><td>Open/closed principle: “software entities … should be open for extension, but closed for modification.”</td></tr><tr><td>L</td><td>Liskov substitution principle: “objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.”</td></tr><tr><td>I</td><td>Interface segregation principle: “many client-specific interfaces are better than one general-purpose interface.”</td></tr><tr><td>D</td><td>Dependency inversion principle: “one should “depend upon abstractions, [not] concretions.”</td></tr></tbody></table><hr><p>程序的完整编译过程分为是：预处理，编译，汇编等，如下关于编译阶段的编译优化的说法中不正确的是（）?</p><p>A. 死代码删除指的是编译过程直接抛弃掉被注释的代码<br>B. 函数内联可以避免函数调用中压栈和退栈的开销<br>C. For循环的循环控制变量通常很适合调度到寄存器访问<br>D. 强度削弱是指执行时间较短的指令等价的替代执行时间较长的指令</p><p>正确答案: A   我的答案: C (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12117316&amp;qid=14858#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p>死代码的含义是指永远不会被执行到或者执行了不起实际作用的代码段，而不是直接抛弃被注释的代码<br>比如: <code>while(false){}</code></p></blockquote><hr><p>面哪些调用转换支持可变长度参数</p><p>A. cdecl<br>B. stdcall<br>C. pascal<br>D. fastcal</p><p>正确答案: A   我的答案: B (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12117316&amp;qid=1317#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p><strong>cdecl </strong>fastcall与<strong>stdcall，三者都是调用约定(Calling convention)，它决定以下内容：1)函数参数的压栈顺序，2)由调用者还是被调用者把参数弹出栈，3)以及产生函数修饰名的方法。<br>1、</strong>stdcall调用约定：函数的参数自右向左通过栈传递，被调用的函数在返回前清理传送参数的内存栈。<br>2、_cdecl是C和C++程序的缺省调用方式。每一个调用它的函数都包含清空堆栈的代码，所以产生的可执行文件大小会比调用_stdcall函数的大。函数采用从右到左的压栈方式。注意：对于可变参数的成员函数，始终使用<strong>cdecl的转换方式。<br>3、</strong>fastcall调用约定：它是通过寄存器来传送参数的（实际上，它用ECX和EDX传送前两个双字（DWORD）或更小的参数，剩下的参数仍旧自右向左压栈传送，被调用的函数在返回前清理传送参数的内存栈）。<br>4、thiscall仅仅应用于”C++”成员函数。this指针存放于CX寄存器，参数从右到左压。thiscall不是关键词，因此不能被程序员指定。<br>5、nakedcall采用1-4的调用约定时，如果必要的话，进入函数时编译器会产生代码来保存ESI，EDI，EBX，EBP寄存器，退出函数时则产生代码恢复这些寄存器的内容。naked call不产生这样的代码。naked call不是类型修饰符，故必须和_declspec共同使用。</p></blockquote><h2 id="1028"><a href="#1028" class="headerlink" title="1028"></a>1028</h2><h3 id="Vector-的其他方法"><a href="#Vector-的其他方法" class="headerlink" title="Vector 的其他方法"></a>Vector 的其他方法</h3><p>主要介绍了三种具有代表性的 STL 方法：<code>for_each(), random_shuffle(), sort()</code>。</p><h4 id="for-each"><a href="#for-each" class="headerlink" title="for_each()"></a>for_each()</h4><p><code>for_each()</code>方法可以用于所有的容器类，它接收三个参数，前两个参数为迭代器，确定一个容器的范围，最后一个参数是一个方法，该方法作用于确定范围内每一个实体。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// print info in the old way</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.size(); i++)</span><br><span class="line">ShowReview(books[i]);</span><br><span class="line"><span class="comment">// print info by for_each()</span></span><br><span class="line"><span class="comment">// before use for_each(), including algorithm is needed</span></span><br><span class="line">for_each(books.begin(), books.end(), ShowReview);</span><br></pre></td></tr></table></figure><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle()"></a>random_shuffle()</h4><p><code>random_shuffle()</code>方法接收两个迭代器作为参数，将该范围内的元素随机排列生产一个新的容器，<strong>该方法要求容器支持随机存取</strong>。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rerange a container consists of books[0], books[1], books[2] in random display.</span></span><br><span class="line">random_shuffle(books.begin(), books.begin()+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p><code>sort()</code>方法用于将给定容器按照升序进行排列，使用内建方法 <code>operator&lt;()</code>进行比较。如果想要对自定义对象使用<code>sort()</code>方法，需要用户自己实现<code>operator&lt;()</code>方法。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Review &amp; r1, <span class="keyword">const</span> Review &amp; r2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// the title members sort in lexicographic order </span></span><br><span class="line">  <span class="keyword">if</span> (r1.title &lt; r2.title)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (r1.title == r2.title &amp;&amp; r1.rating &lt; r2.rating)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(books.begin(), books.end());</span><br></pre></td></tr></table></figure><p>此外，该方法还有一个重载形式，<code>sort(it1, it2, func)</code>，传入两个迭代器用于确定排序范围，第三个参数代替<code>operator&lt;</code>作为排序规则。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sort_by_rating</span><span class="params">(<span class="keyword">const</span> Review &amp; r1, <span class="keyword">const</span> Review &amp; r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r1.rating &lt; r2.rating)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(books.begin(), books.end(), sort_by_rating);</span><br></pre></td></tr></table></figure><h3 id="Linux-shell脚本中的-cd-命令不起作用"><a href="#Linux-shell脚本中的-cd-命令不起作用" class="headerlink" title="Linux shell脚本中的 cd 命令不起作用"></a>Linux shell脚本中的 cd 命令不起作用</h3><p>脚本的作用是切换到某一目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># name: changedir.sh</span></span><br><span class="line"><span class="built_in">cd</span> /home/username/pycode</span><br></pre></td></tr></table></figure><p>但是在终端执行后没有任何反应。Google后才知道是因为脚本调用了一个子shell，在子shell中执行该命令对当前shell没有影响。解决方法:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line"><span class="built_in">source</span> changedir.sh</span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line">. ./changedir.sh</span><br></pre></td></tr></table></figure><h3 id="错题本-1"><a href="#错题本-1" class="headerlink" title="错题本"></a>错题本</h3><p>“引用”与多态的关系？</p><p>A. 两者没有关系<br>B. 引用可以作为产生多态效果的手段<br>C. 一个基类的引用不可以指向它的派生类实例<br>D. 以上都不正确</p><p>正确答案: B   我的答案: A (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12134872&amp;qid=15048#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p>引用是除指针外另一个可以产生多态效果的手段。这意味着，一个基类的引用可以指向它的派生类实例。 </p></blockquote><hr><p>下面说法正确的是（）</p><p>A. C++已有的任何运算符都可以重载<br>B. const对象只能调用const类型成员函数<br>C. 构造函数和析构函数都可以是虚函数<br>D. 函数重载返回值类型必须相同</p><p>正确答案: B   我的答案: C (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12134872&amp;qid=16013#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p>A，普通的运算符可以重载，特殊的不能重载，比如 . :: 等<br>B，coust是常对象，也就是不改变成员变量的值，而成员函数中只有const函数可以确保不改变成员变量的值<br>C，析构函数一般定义为虚函数，构造函数不能是虚函数<br>D，重载只要求函数名相同，参数类型和个数不同，不要求返回值类型</p></blockquote><hr><p>Which of the following statements are true?</p><p>A. We can create a binary tree from given inorder and preorder traversal sequences.<br>B. We can create a binary tree from given preorder and postorder traversal sequences.<br>C. For an almost sorted array, insertion sort can be more effective than Quicksort.<br>D. Suppose T(n) is the runtime of resolving a problem with n elements, T(n) = Θ(1) if n = 1; T(n) = 2T(n/2) + Θ(n) if &gt; 1; so T(n) is Θ(n log n).<br>E. None of the above.</p><p>正确答案: A C D   我的答案: E (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12134872&amp;qid=1343#summary" target="_blank" rel="noopener">解析</a>:</p><p>常见算法</p><table><thead><tr><th><a href="http://zh.wikipedia.org/wiki/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">折半搜索</a></th><th><img src="http://upload.wikimedia.org/math/a/d/7/ad7b7abd2c36bd89b3ead9cda1ff86e4.png" alt="img"></th><th><img src="http://upload.wikimedia.org/math/b/9/3/b9317767ec3f2ff5d712084820486d01.png" alt="img"></th><th>情形二（<em>k</em> = 0）</th></tr></thead><tbody><tr><td><a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">二叉树</a>遍历</td><td><img src="http://upload.wikimedia.org/math/9/6/b/96beeeef2825f2f0d031ee30876fdca5.png" alt="img"></td><td><img src="http://upload.wikimedia.org/math/5/c/1/5c151486ce3904339687c2bac3cccd8d.png" alt="img"></td><td>情形一</td></tr><tr><td><a href="http://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">归并排序</a></td><td><img src="http://upload.wikimedia.org/math/6/b/2/6b2ec2916fd7e37481326ec8a72df4ac.png" alt="img"></td><td><img src="http://upload.wikimedia.org/math/1/2/d/12d90f1573e5bef05bd4144d8e27f6b2.png" alt="img"></td><td>情形二（<em>k</em> = 0）</td></tr></tbody></table><hr><p>以下哪些做法是不正确或者应该极力避免的：【多选】（ ）</p><p>A. 构造函数声明为虚函数<br>B. 派生关系中的基类析构函数声明为虚函数<br>C. 构造函数中调用虚函数<br>D. 析构函数中调用虚函数</p><p>正确答案: A C D   我的答案: D (错误)</p><p><a href="https://www.nowcoder.com/test/question/done?tid=12134872&amp;qid=7127#summary" target="_blank" rel="noopener">解析</a>:</p><blockquote><p>先析构子类再析构父类，如果父类析构函数有虚函数，会导致调用子类的已经析构的内容。</p><p>先构造父亲类再构造子类，如果父类构造函数有虚函数，会导致调用子类还没构造的内容。</p><p>所谓虚函数就是多态情况下只执行一个,而从继承的概念来讲,总是要先构造父类对象,然后才能是子类对象,如果构造函数设为虚函数,那么当你在构造父类的构造函数时就不得不显示的调用构造,还有一个原因就是为了防错,试想如果你在子类中一不小心重写了个跟父类构造函数一样的函数,那么你的父类的构造函数将被覆盖,也即不能完成父类的构造.就会出错.<br>在构造函数不要调用虚函数。在基类构造的时候，虚函数是非虚，不会走到派生类中，既是采用的静态绑定。显然的是：当我们构造一个子类的对象时，先调用基类的构造函数，构造子类中基类部分，子类还没有构造，还没有初始化，如果在基类的构造中调用虚函数，如果可以的话就是调用一个还没有被初始化的对象，那是很危险的，所以C++中是不可以在构造父类对象部分的时候调用子类的虚函数实现。但是不是说你不可以那么写程序，你这么写，编译器也不会报错。只是你如果这么写的话编译器不会给你调用子类的实现，而是还是调用基类的实现。</p><p>在析构函数中也不要调用虚函数。在析构的时候会首先调用子类的析构函数，析构掉对象中的子类部分，然后在调用基类的析构函数析构基类部分，如果在基类的析构函数里面调用虚函数，会导致其调用已经析构了的子类对象里面的函数，这是非常危险的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1027&quot;&gt;&lt;a href=&quot;#1027&quot; class=&quot;headerlink&quot; title=&quot;1027&quot;&gt;&lt;/a&gt;1027&lt;/h2&gt;&lt;h3 id=&quot;关于-for-循环的作用域&quot;&gt;&lt;a href=&quot;#关于-for-循环的作用域&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="c++" scheme="https://callmexss.github.io/tags/c/"/>
    
      <category term="shell" scheme="https://callmexss.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Coursera-algorithm：配置algs4环境</title>
    <link href="https://callmexss.github.io/2017/10/17/Coursera-algorithm%EF%BC%9A%E9%85%8D%E7%BD%AEalgs4%E7%8E%AF%E5%A2%83/"/>
    <id>https://callmexss.github.io/2017/10/17/Coursera-algorithm：配置algs4环境/</id>
    <published>2017-10-17T13:22:34.000Z</published>
    <updated>2019-03-28T13:35:20.931Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一天，总算是把测试的程序运行成功了，问题还是出在了环境变量上。</p><ol><li><p>要把<code>algs4.jar</code> 和 <code>stdlib.jar</code> 都添加到 <code>class_path</code> 才能使用jar包提供的功能。</p></li><li><p>运行编译好的class文件时不加扩展名，例如Example.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Example</span><br></pre></td></tr></table></figure><p>否则会出现以下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误: 找不到或无法加载主类 Example.class</span><br></pre></td></tr></table></figure></li><li><p>运行测试程序</p><p>数据文件 <code>tinyUF.txt:</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">4 3</span><br><span class="line">3 8</span><br><span class="line">6 5</span><br><span class="line">9 4</span><br><span class="line">2 1</span><br><span class="line">8 9</span><br><span class="line">5 0</span><br><span class="line">7 2</span><br><span class="line">6 1</span><br><span class="line">1 0</span><br><span class="line">6 7</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pid = id[p];</span><br><span class="line"><span class="keyword">int</span> qid = id[q];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pid) id[i] = qid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = StdIn.readInt();</span><br><span class="line">        QuickFindUF qf = <span class="keyword">new</span> QuickFindUF(n);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = StdIn.readInt();</span><br><span class="line">            <span class="keyword">int</span> q = StdIn.readInt();</span><br><span class="line">            <span class="keyword">if</span> (qf.connected(p, q)) <span class="keyword">continue</span>;</span><br><span class="line">            qf.union(p, q);</span><br><span class="line">            StdOut.println(p + <span class="string">" "</span> + q);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(qf.count() + <span class="string">" components"</span>);</span><br><span class="line">        StdOut.println(qf.connected(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        StdOut.println(qf.connected(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">        StdOut.println(qf.connected(<span class="number">7</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; javac QuickFindUF.java</span><br><span class="line">&gt;&gt; java QuickFindUF &lt; tinyUF.txt</span><br><span class="line">&gt;&gt; output:</span><br><span class="line">4 3</span><br><span class="line">3 8</span><br><span class="line">6 5</span><br><span class="line">9 4</span><br><span class="line">2 1</span><br><span class="line">5 0</span><br><span class="line">7 2</span><br><span class="line">6 1</span><br><span class="line">10 components</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure></li><li><p>关于怎么在IDE中添加参数执行的方法还没有找到，这里留到后续补充。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了一天，总算是把测试的程序运行成功了，问题还是出在了环境变量上。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要把&lt;code&gt;algs4.jar&lt;/code&gt; 和 &lt;code&gt;stdlib.jar&lt;/code&gt; 都添加到 &lt;code&gt;class_path&lt;/code&gt; 才能使用ja
      
    
    </summary>
    
    
      <category term="java" scheme="https://callmexss.github.io/tags/java/"/>
    
      <category term="DSA" scheme="https://callmexss.github.io/tags/DSA/"/>
    
      <category term="环境配置" scheme="https://callmexss.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>python websites collection</title>
    <link href="https://callmexss.github.io/2017/10/13/python-websites-collection/"/>
    <id>https://callmexss.github.io/2017/10/13/python-websites-collection/</id>
    <published>2017-10-13T07:39:15.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<p>一个各种python资源的整合</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个各种python资源的整合&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="https://callmexss.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>哈密顿行动0x01-获取密码</title>
    <link href="https://callmexss.github.io/2017/08/29/%E5%93%88%E5%AF%86%E9%A1%BF%E8%A1%8C%E5%8A%A80x01-%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81/"/>
    <id>https://callmexss.github.io/2017/08/29/哈密顿行动0x01-获取密码/</id>
    <published>2017-08-29T15:35:54.000Z</published>
    <updated>2019-03-28T13:35:20.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关卡描述"><a href="#关卡描述" class="headerlink" title="关卡描述"></a>关卡描述</h3><p>进入第一关，是需要得到一个密码。</p><p><img src="/images/hmdxd01-1.png" alt="hmdxd01-1"></p><h3 id="关卡解答"><a href="#关卡解答" class="headerlink" title="关卡解答"></a>关卡解答</h3><p>一般这种游戏第一关都比较套路了，想知道的都在源码里。所以打开源码看一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=JavaScript&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="comment">// 由给定的数组生成一个新的数组，其实就是在最前面添了没用的一位</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.length = makeArray.arguments.length </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++)</span><br><span class="line">        <span class="keyword">this</span>[i + <span class="number">1</span>] = makeArray.arguments[i]</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Array</span> = <span class="keyword">new</span> makeArray(<span class="string">'B'</span>,<span class="string">'R'</span>,<span class="string">'E'</span>,<span class="string">'L'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'O'</span>,<span class="string">'A'</span>,<span class="string">'T'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成密码的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">password</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> pass =</span><br><span class="line">(numArray[<span class="number">7</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">1</span>])+(numArray[<span class="number">5</span>])+(numArray[<span class="number">9</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">1</span>])+(numArray[<span class="number">5</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">9</span>])+(numArray[<span class="number">7</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> pass1 = prompt(<span class="string">'Please Enter Your Password'</span>,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pass1 == pass) &#123;</span><br><span class="line">alert(<span class="string">'WOW! OK, OK, this is begin ...'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">num+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> pass1 =alert(<span class="string">"wrong! idoit you are! i am strong!strong!strong!strong!strong!strong!strong!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --&gt;</span></span><br><span class="line">&lt;<span class="regexp">/SCRIPT&gt;</span></span><br></pre></td></tr></table></figure><p>到这里已经可以知道密码是如何生成的了。再接着看看下面的源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wlkji=<span class="string">"&lt;citlnug=JvSrp\"\r\rfnto aera(&#123;\nhslnt  aera.ruet.egh\no vri=0   hslnt;i+\rti[  ]=mkAryagmnsi\r&#125;\na uAry=nwmkAry'''''''''''''''''';/citsrp agae\"aacit&gt;\n\nucinmkAry)\rti.egh=mkAryagmnslnt\rfr(a   ;i&lt;ti.egh +)\nhsi+1  aera.ruet[]\n\rvrnmra  e aera(2,4,7,6,8,5,1,3,9)&lt;srp&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="built_in">unescape</span>(<span class="string">"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B"</span>));</span><br></pre></td></tr></table></figure><p>首先观察这个变量wlkji可以发现它很像是javascript的代码，事实上它确实是一段javascript代码，通过把一句javascript语句按照奇偶数位的字符分离得到。最开始我是通过在sublime中观察后，利用这一点半自动（几乎手动）拼出了wlkji中字符串表示的js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = makeArray.arguments.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++)</span><br><span class="line">        <span class="keyword">this</span>[i + <span class="number">1</span>] = makeArray.arguments[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numArray = <span class="keyword">new</span> makeArray(<span class="string">'2'</span>,<span class="string">'4'</span>,<span class="string">'7'</span>,<span class="string">'6'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'9'</span>);</span><br></pre></td></tr></table></figure><p>然后通过：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pass =</span><br><span class="line">(numArray[<span class="number">7</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">1</span>])+(numArray[<span class="number">5</span>])+(numArray[<span class="number">9</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">1</span>])+(numArray[<span class="number">5</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">6</span>])+(numArray[<span class="number">3</span>])+(numArray[<span class="number">9</span>])+(numArray[<span class="number">7</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">4</span>])+(numArray[<span class="number">2</span>])+(numArray[<span class="number">8</span>])+(numArray[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><p>计算出密码即可。</p><p>因为对js不熟悉，所以中间的过程都是用python写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接js</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(list(map((<span class="keyword">lambda</span> a, b: a + b), s1, s2)))</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># s1 = vrnmra  e aera(2,4,7,6,8,5,1,3,9)</span></span><br><span class="line"><span class="comment"># s2 = a uAry=nwmkAry'''''''''''''''''';</span></span><br><span class="line"><span class="comment"># func(s1, s2) --&gt; var numArray = new makeArray('2','4','7','6','8','5','1','3','9');</span></span><br></pre></td></tr></table></figure><p>最终得到了wlkji中的字符串表示的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = makeArray.arguments.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++)</span><br><span class="line">        <span class="keyword">this</span>[i + <span class="number">1</span>] = makeArray.arguments[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numArray = <span class="keyword">new</span> makeArray(<span class="string">'2'</span>,<span class="string">'4'</span>,<span class="string">'7'</span>,<span class="string">'6'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'9'</span>);</span><br></pre></td></tr></table></figure><p>到这里再用password函数中pass所在的表达式计算一下即可。</p><p>这一关本来的意图其实是javascript中的escape编码和eval加解密：</p><blockquote><p>eval(unescape(“function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2<em>www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2</em>www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B”));</p></blockquote><p>通过<a href="http://www.bejson.com/enc/eval_package/" target="_blank" rel="noopener">在线解密</a>解密后得到eval执行的字符串内容为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RsRsRsRs</span>(<span class="params">teaabb</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tttmmm=<span class="string">""</span>;</span><br><span class="line">    l=teaabb.length;</span><br><span class="line">    www=hhhhffff=<span class="built_in">Math</span>.round(l/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;<span class="number">2</span>*www)</span><br><span class="line">        hhhhffff=hhhhffff<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;hhhhffff;i++)</span><br><span class="line">        tttmmm = tttmmm + teaabb.charAt(i)+ teaabb.charAt(i+hhhhffff);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;<span class="number">2</span>*www)</span><br><span class="line">        tttmmm = tttmmm + teaabb.charAt(l<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(tttmmm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RsRsRsRs(wlkji);</span><br></pre></td></tr></table></figure><p>只需要将wlkji带入该函数即可得到和上面手工拼接相同的代码，这段解密代码也非常容易改写成python的形式。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><h4 id="JavaScript-eval-函数"><a href="#JavaScript-eval-函数" class="headerlink" title="JavaScript eval() 函数"></a>JavaScript eval() 函数</h4><p>eval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><p>如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。</p><p><strong>语法</strong></p><p>eval(<em>string</em>)</p><h4 id="JavaScript-charAt-方法"><a href="#JavaScript-charAt-方法" class="headerlink" title="JavaScript charAt() 方法"></a>JavaScript charAt() 方法</h4><p>返回特定位置的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"python"</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.charAt(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// output: 't'</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-round-方法"><a href="#JavaScript-round-方法" class="headerlink" title="JavaScript round() 方法"></a>JavaScript round() 方法</h4><p>round() 方法可把一个数字舍入为最接近(四舍五入)的整数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">0.5</span>);</span><br><span class="line"><span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关卡描述&quot;&gt;&lt;a href=&quot;#关卡描述&quot; class=&quot;headerlink&quot; title=&quot;关卡描述&quot;&gt;&lt;/a&gt;关卡描述&lt;/h3&gt;&lt;p&gt;进入第一关，是需要得到一个密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/hmdxd01-1.png&quot; alt=&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="https://callmexss.github.io/tags/python/"/>
    
      <category term="javascript" scheme="https://callmexss.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>哈密顿行动0x00--图灵测试</title>
    <link href="https://callmexss.github.io/2017/08/29/%E5%93%88%E5%AF%86%E9%A1%BF%E8%A1%8C%E5%8A%A80x00-%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95/"/>
    <id>https://callmexss.github.io/2017/08/29/哈密顿行动0x00-图灵测试/</id>
    <published>2017-08-29T06:39:34.000Z</published>
    <updated>2019-03-28T13:35:20.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> <a href="http://game6.iok.la" target="_blank" rel="noopener">哈密顿行动</a> - 一个虚拟的、在线的计算机安全技术体验游戏，通过该游戏，可以测试您的“黑客技能”。</p></blockquote><h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><blockquote><p>图灵测试，是由历史上著名的计算机学家，也是计算机之父，第一台原型计算机——图灵机的创造者阿兰·图灵所提出的，图灵测试的目的，是为了验证计算机能否拥有像人类一样的思考能力。这项测试由一个测试者（A），和一个被测试者组成(B)。测试者A是人类，被测试者B，可能是人类，也可能是计算机。A通过向B提一定数量的问题，B进行回答，然后A由B反馈的信息，判断B是人类还是计算机。在这项测试中，事先并不告诉A，B是人类还是计算机。B如果作为一台机器，如果有超过30%的A，认为B是人类，那么证明计算机是有智能的。 </p></blockquote><p>开始游戏前需要一个账号，而通过了这个叫做但不是的“图灵测试”之后才能注册。</p><h3 id="关卡描述"><a href="#关卡描述" class="headerlink" title="关卡描述"></a>关卡描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A：98503264587102541690 - 68034165897022102600  </span><br><span class="line">B：90534205890120542090  </span><br><span class="line">A：59703214569802513647 - 13983025584603517840   </span><br><span class="line">B：59980225089803007807  </span><br><span class="line">A：56055201367950321158 - 56630489702544691502  </span><br><span class="line">B：？？？</span><br></pre></td></tr></table></figure><h3 id="关卡解答"><a href="#关卡解答" class="headerlink" title="关卡解答"></a>关卡解答</h3><p>其实就是一个找规律的题目，先分析下第一组数据的输入和输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  98503264587102541690</span><br><span class="line">- 68034165897022102600</span><br><span class="line"> -----------------------  </span><br><span class="line">  90534205890120542090</span><br></pre></td></tr></table></figure></p><p>观察后很容易可以发现这里的“-”运算，相当于一种位运算。减数和被减数逐位比较，如果两个数相等，则进行“-”运算后结果为0，如果两数不想等，则运算结果为两数中的最大值。<br>这个运算量不大，笔算就可以完成，不过还是准备用python写一下练练手。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># define operation of '-'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    l1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> str(num1)]</span><br><span class="line">    l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> str(num2)]</span><br><span class="line">    l3 = list(map(<span class="keyword">lambda</span> a, b: <span class="string">'0'</span> <span class="keyword">if</span> a == b <span class="keyword">else</span> max(a, b), l1, l2))</span><br><span class="line">    <span class="keyword">print</span> (reduce(<span class="keyword">lambda</span> a, b: a + b, l3))</span><br><span class="line">    </span><br><span class="line">minus(<span class="number">56055201367950321158</span>, <span class="number">56630489702544691502</span>)</span><br></pre></td></tr></table></figure></p><p>主要是为了熟悉map和reduce的用法，记个小坑，py3中的reduce在functools包里，需要先导入才能使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; &lt;a href=&quot;http://game6.iok.la&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;哈密顿行动&lt;/a&gt; - 一个虚拟的、在线的计算机安全技术体验游戏，通过该游戏，可以测试您的“黑客技能”。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="python" scheme="https://callmexss.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（零）-概述</title>
    <link href="https://callmexss.github.io/2017/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E9%9B%B6%EF%BC%89-%E6%A6%82%E8%BF%B0/"/>
    <id>https://callmexss.github.io/2017/07/14/计算机网络学习笔记（零）-概述/</id>
    <published>2017-07-14T10:12:42.000Z</published>
    <updated>2019-03-28T14:22:56.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从0和1说起"><a href="#从0和1说起" class="headerlink" title="从0和1说起"></a>从0和1说起</h3><p>人与人之间可以通过某种媒介进行交流，例如语言、文字、表情等等。那么计算机之间是如何通信的呢？答案是使用计算机自己的语言——0和1。二进制可以说是计算机科学的基础，其内容也十分丰富，关于二进制的内容以后再详细写文章总结，此处暂不细表。</p><p>Q: 为什么计算机之间的通信使用二进制？</p><p>最主要的原因：二进制只有两种状态。这就意味着它可以很容易的通过物理方式实现，例如开关的打开和关闭，电平的高和低，科幻小说《三体》中人列计算机系统还通过举红白旗来实现二进制。</p><p>Q：什么是Internet？<br><a href="https://www.khanacademy.org/computing/computer-science/internet-intro/internet-works-intro/v/the-internet-wires-cables-and-wifi" target="_blank" rel="noopener">官方</a>（一个很简短有趣的关于网络的科普教程）一点的说法：</p><blockquote><p>A tangible physical system made to move information.<br>一个有形的用于传输信息的系统实体。</p></blockquote><p>通俗说来，Internet更像是一个邮局服务系统，只是其运输的不是包裹和信件，而是二进制的数据。这些数据是由“位(bit)”构成的。“位”，也就是我们常说的“比特”，它可以使用任意一组反义词来描述，例如开关，是否，真假，在计算机科学中，用0和1来表示这两种相反的状态。八个<strong>比特(bit)</strong>组成一个<strong>字节(byte)</strong>，即$1 Byte = 8 Bits$。</p><table><thead><tr><th style="text-align:center">位(bit)</th><th style="text-align:center">字节(byte)</th></tr></thead><tbody><tr><td style="text-align:center">可以理解成“占位”的意思，一个bit就是一个位置，这个位置的值可以是{0, 1}中的一个</td><td style="text-align:center">一个字节由八个位组成，直观来看00000100就是一个字节，字节可用于数据存储，也可以经过特定的编码代表特定含义</td></tr></tbody></table><p>还有一个相关的概念“字(word)”，同一时间处理二进制数的位数叫字长，由于不同的cpu具有不同的处理能力，所以字长的值要视实际情况而定。</p><h3 id="网络协议的分层"><a href="#网络协议的分层" class="headerlink" title="网络协议的分层"></a>网络协议的分层</h3><p>两种分层模型</p><table><thead><tr><th style="text-align:center">osi</th><th style="text-align:center">物数</th><th style="text-align:center">网</th><th style="text-align:center">传</th><th style="text-align:center">会表应</th></tr></thead><tbody><tr><td style="text-align:center">tcp/ip</td><td style="text-align:center">链路层</td><td style="text-align:center">网络层</td><td style="text-align:center">传输层</td><td style="text-align:center">应用层</td></tr><tr><td style="text-align:center">PDU</td><td style="text-align:center">位(bit) 帧(frame)</td><td style="text-align:center">包(packet)</td><td style="text-align:center">段(segment)</td></tr></tbody></table><p>分层的好处</p><p>​   接口、服务</p><p>*nix 系统中/etc/services文件中包含了常用的端口号</p><p>可以使用命令：grep 协议名 /etc/services 查看</p><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; grep http /etc/services </span><br><span class="line">http            80/tcp          www             <span class="comment"># WorldWideWeb HTTP</span></span><br><span class="line">http            80/udp                          <span class="comment"># HyperText Transfer Protocol</span></span><br><span class="line">https           443/tcp                         <span class="comment"># http protocol over TLS/SSL</span></span><br><span class="line">https           443/udp</span><br><span class="line">http-alt        8080/tcp        webcache        <span class="comment"># WWW caching service</span></span><br><span class="line">http-alt        8080/udp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;从0和1说起&quot;&gt;&lt;a href=&quot;#从0和1说起&quot; class=&quot;headerlink&quot; title=&quot;从0和1说起&quot;&gt;&lt;/a&gt;从0和1说起&lt;/h3&gt;&lt;p&gt;人与人之间可以通过某种媒介进行交流，例如语言、文字、表情等等。那么计算机之间是如何通信的呢？答案是使用计算机
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://callmexss.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>my word list</title>
    <link href="https://callmexss.github.io/2017/07/12/my-word-list/"/>
    <id>https://callmexss.github.io/2017/07/12/my-word-list/</id>
    <published>2017-07-12T13:38:34.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单词表"><a href="#单词表" class="headerlink" title="单词表"></a>单词表</h2><p><strong>The original publish date is <code>date: 2017-11-20 21:38:34</code>, I changed it to the day I started this blog. </strong></p><h3 id="词根词缀"><a href="#词根词缀" class="headerlink" title="词根词缀"></a>词根词缀</h3><hr><p><em>fer-</em></p><p>bring，carry，表示“带来，拿来”</p><hr><p><em>spect-,spic-</em></p><p>look，see，表示“看”</p><hr><p><em>para-</em></p><p>旁，聚，失调，异常，辅助，副，相似，超，外，侧</p><hr><p><em>avi-</em></p><p>desire，bird，表示“渴望，鸟”</p><hr><p><em>mastic-,mand-,mouth</em></p><p>表示“嘴，咀嚼”</p><hr><p><em>mit-</em></p><p>soft，表示“软”，引申为“成熟”、“温顺”</p><hr><p><em>cel-,col-,cul-</em></p><p>top，表示“顶”</p><hr><p><em>err-</em></p><p>wander，mistake，表示“漫游”，引申为“犯错误（偏离）”</p><hr><h3 id="c-primer-plus-5th"><a href="#c-primer-plus-5th" class="headerlink" title="c++ primer plus 5th"></a>c++ primer plus 5th</h3><p><em>pertain</em><br>vi. 属于；关于；适合<br><em>per-</em> 贯穿，完全    <em>-tain</em> 抓住，握住</p><p><em>intermediate</em><br>vi. 起媒介作用<br>adj. 中间的，中级的<br>n. [化学] 中间物；媒介<br><em>inter-</em>,在内，在中间，相互，<em>-med</em>,中间，词源同middle,mediate.即中间的，中级的。<br>eg. <em>A buffer is a block of memory used as an intermediate, temporary storage facility for the transfer of information from a device to a program or from a program to a device.</em></p><p><em>mandatory</em><br>adj. 强制的；托管的；命令的<br>n. 受托者（等于mandatary）<br>eg. <em>ANSI C formalized recognition of this I/O package, called the Standard Input/Output package, by making it a mandatory component of the standard C library.</em></p><h3 id="小词（长度小于6的记不住的）"><a href="#小词（长度小于6的记不住的）" class="headerlink" title="小词（长度小于6的记不住的）"></a>小词（长度小于6的记不住的）</h3><p><em>slap</em><br>vt. 拍击；侮辱；掌击；掴…的耳光<br>n. 掴；侮辱；掌击；拍打声<br>vi. 掴；拍击<br>adv. 直接地；猛然地；恰好<br> <img src="/2017/07/12/my-word-list/slap.jpg"></p><p><em>knob</em><br>n. 把手；瘤；球形突出物<br>vi. 鼓起<br>vt. 使有球形突出物<br>n. (Knob)人名；(匈、捷)克诺布<br><img src="/2017/07/12/my-word-list/knob.jpg"></p><p><em>twist</em><br>vt. 捻；拧；扭伤；编织；使苦恼<br>n. 扭曲；拧；扭伤<br>vi. 扭动；弯曲<br>n. (Twist)人名；(英)特威斯特<br><img src="/2017/07/12/my-word-list/twist.jpg"></p><p><em>reed</em><br>n. [作物] 芦苇；簧片；牧笛；不可依靠的人<br>vt. 用芦苇盖；用芦苇装饰<br>n. (Reed)人名；(西、意、瑞典)雷德；(英)里德</p><blockquote><p>deer &lt;===&gt; reed        鹿生活在芦苇丛中 </p></blockquote><img src="/2017/07/12/my-word-list/reed.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单词表&quot;&gt;&lt;a href=&quot;#单词表&quot; class=&quot;headerlink&quot; title=&quot;单词表&quot;&gt;&lt;/a&gt;单词表&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;The original publish date is &lt;code&gt;date: 2017-11-20 21:38:
      
    
    </summary>
    
    
      <category term="English" scheme="https://callmexss.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键</title>
    <link href="https://callmexss.github.io/2017/07/11/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://callmexss.github.io/2017/07/11/Eclipse快捷键/</id>
    <published>2017-07-11T09:01:34.000Z</published>
    <updated>2019-03-28T13:35:20.947Z</updated>
    
    <content type="html"><![CDATA[<p>目前感觉最常用的有：</p><p>alt + /  自动补全<br>ctrl + /  注释（取消注释）当前选定的内容<br>ctrl + d  删除当前行<br>ctrl + m  最大化（还原）当前窗口<br>ctrl + e  打开编辑器（切换窗口）<br>ctrl + o  显示大纲<br>ctrl + shift + f  格式化代码<br>ctrl + shift + o 导入及管理import语句<br>ctrl + shift + t  打开Open Type 查找类文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前感觉最常用的有：&lt;/p&gt;
&lt;p&gt;alt + /  自动补全&lt;br&gt;ctrl + /  注释（取消注释）当前选定的内容&lt;br&gt;ctrl + d  删除当前行&lt;br&gt;ctrl + m  最大化（还原）当前窗口&lt;br&gt;ctrl + e  打开编辑器（切换窗口）&lt;br&gt;ctrl
      
    
    </summary>
    
      <category term="tools" scheme="https://callmexss.github.io/categories/tools/"/>
    
    
      <category term="java" scheme="https://callmexss.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://callmexss.github.io/2017/07/11/hello-world/"/>
    <id>https://callmexss.github.io/2017/07/11/hello-world/</id>
    <published>2017-07-11T07:00:00.000Z</published>
    <updated>2019-03-28T13:35:20.959Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
