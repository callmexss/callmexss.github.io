{"compress":true,"commitItems":[["856029ad-98ff-4d2b-9d9c-8786cafaf600",1508151969743,"---\ntitle: 哈密顿行动0x01-获取密码\ntags:\n  - python\n  - javascript\ndate: 2017-08-29 23:35:54\n---\n\n### 关卡描述\n\n进入第一关，是需要得到一个密码。\n\n![hmdxd01-1](..\\images\\hmdxd01-1.png)\n\n### 关卡解答\n\n一般这种游戏第一关都比较套路了，想知道的都在源码里。所以打开源码看一下：\n\n```javascript\n<SCRIPT language=JavaScript>\n\n<!--\n// 由给定的数组生成一个新的数组，其实就是在最前面添了没用的一位\nfunction makeArray(){\n\tthis.length = makeArray.arguments.length \n        \t\tfor (var i = 0; i < this.length; i++)\n        \t\t\tthis[i + 1] = makeArray.arguments[i]\n    \t}\nvar Array = new makeArray('B','R','E','L','E','F','O','A','T');\n\n// 生成密码的函数\nfunction password() {\n\tvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n\n\tvar num = 1;\n\tvar pass1 = prompt('Please Enter Your Password','');\n\n\t\twhile (num < 2) {\n\t\t\tif (pass1 == pass) {\n\t\t\t\talert('WOW! OK, OK, this is begin ...')\nbreak;\n\t\t} \n\n\tnum+=1;\n\tvar pass1 =alert(\"wrong! idoit you are! i am strong!strong!strong!strong!strong!strong!strong!\")\n\t}\n}\n// -->\n</SCRIPT>\n\n```\n\n到这里已经可以知道密码是如何生成的了。再接着看看下面的源码：\n\n```javascript\nwlkji=\"<citlnug=JvSrp\\\"\\r\\rfnto aera({\\nhslnt  aera.ruet.egh\\no vri=0   hslnt;i+\\rti[  ]=mkAryagmnsi\\r}\\na uAry=nwmkAry'''''''''''''''''';/citsrp agae\\\"aacit>\\n\\nucinmkAry)\\rti.egh=mkAryagmnslnt\\rfr(a   ;i<ti.egh +)\\nhsi+1  aera.ruet[]\\n\\rvrnmra  e aera(2,4,7,6,8,5,1,3,9)<srp>\";\n\neval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n```\n\n首先观察这个变量wlkji可以发现它很像是javascript的代码，事实上它确实是一段javascript代码，通过把一句javascript语句按照奇偶数位的字符分离得到。最开始我是通过在sublime中观察后，利用这一点半自动（几乎手动）拼出了wlkji中字符串表示的js代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n然后通过：\n\n```javascript\nvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n```\n\n计算出密码即可。\n\n因为对js不熟悉，所以中间的过程都是用python写的：\n\n```python\n# 拼接js\ndef func(s1, s2):\n    return ''.join(list(map((lambda a, b: a + b), s1, s2)))\n# 例如：\n# s1 = vrnmra  e aera(2,4,7,6,8,5,1,3,9)\n# s2 = a uAry=nwmkAry'''''''''''''''''';\n# func(s1, s2) --> var numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n最终得到了wlkji中的字符串表示的代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n到这里再用password函数中pass所在的表达式计算一下即可。\n\n这一关本来的意图其实是javascript中的escape编码和eval加解密：\n\n> eval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n通过[在线解密](http://www.bejson.com/enc/eval_package/)解密后得到eval执行的字符串内容为\n\n```javascript\nfunction RsRsRsRs(teaabb) \n{\n    var tttmmm=\"\";\n    l=teaabb.length;\n    www=hhhhffff=Math.round(l/2);\n    if(l<2*www)\n        hhhhffff=hhhhffff-1;\n    for(i=0;i<hhhhffff;i++)\n        tttmmm = tttmmm + teaabb.charAt(i)+ teaabb.charAt(i+hhhhffff);\n    if(l<2*www)\n        tttmmm = tttmmm + teaabb.charAt(l-1);\n    document.write(tttmmm);\n}\n\nRsRsRsRs(wlkji);\n```\n\n只需要将wlkji带入该函数即可得到和上面收工拼接相同的代码，这段解密代码也非常容易改写成python的形式。\n\n### 备注\n\n#### JavaScript eval() 函数\n\neval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。\n\n如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。\n\n**语法**\n\neval(*string*)\n\n#### JavaScript charAt() 方法\n\n返回特定位置的字符\n\n```javascript\nvar str = \"python\";\nvar n = str.charAt(2)\n// output: 't'\n```\n\n#### JavaScript round() 方法\n\nround() 方法可把一个数字舍入为最接近(四舍五入)的整数：\n\n```javascript\nMath.round(0.5);\n// output: 1\n```\n\n\n\n\n\n\n\n",[[1508151967604,["xaut@xaut-PC",[[-1,4316,"收工"]],[4318,4318],[4316,4316]]],[1508151969148,["xaut@xaut-PC",[[1,4316,"手工"]],[4316,4316],[4318,4318]]]]],["75509310-5ab8-45a1-a42f-f84ab35285e6",1508291406506,"---\ntitle: 哈密顿行动0x01-获取密码\ntags:\n  - python\n  - javascript\ndate: 2017-08-29 23:35:54\n---\n\n### 关卡描述\n\n进入第一关，是需要得到一个密码。\n\n![hmdxd01-1](..\\images\\hmdxd01-1.png)\n\n### 关卡解答\n\n一般这种游戏第一关都比较套路了，想知道的都在源码里。所以打开源码看一下：\n\n```javascript\n<SCRIPT language=JavaScript>\n\n<!--\n// 由给定的数组生成一个新的数组，其实就是在最前面添了没用的一位\nfunction makeArray(){\n\tthis.length = makeArray.arguments.length \n        \t\tfor (var i = 0; i < this.length; i++)\n        \t\t\tthis[i + 1] = makeArray.arguments[i]\n    \t}\nvar Array = new makeArray('B','R','E','L','E','F','O','A','T');\n\n// 生成密码的函数\nfunction password() {\n\tvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n\n\tvar num = 1;\n\tvar pass1 = prompt('Please Enter Your Password','');\n\n\t\twhile (num < 2) {\n\t\t\tif (pass1 == pass) {\n\t\t\t\talert('WOW! OK, OK, this is begin ...')\nbreak;\n\t\t} \n\n\tnum+=1;\n\tvar pass1 =alert(\"wrong! idoit you are! i am strong!strong!strong!strong!strong!strong!strong!\")\n\t}\n}\n// -->\n</SCRIPT>\n\n```\n\n到这里已经可以知道密码是如何生成的了。再接着看看下面的源码：\n\n```javascript\nwlkji=\"<citlnug=JvSrp\\\"\\r\\rfnto aera({\\nhslnt  aera.ruet.egh\\no vri=0   hslnt;i+\\rti[  ]=mkAryagmnsi\\r}\\na uAry=nwmkAry'''''''''''''''''';/citsrp agae\\\"aacit>\\n\\nucinmkAry)\\rti.egh=mkAryagmnslnt\\rfr(a   ;i<ti.egh +)\\nhsi+1  aera.ruet[]\\n\\rvrnmra  e aera(2,4,7,6,8,5,1,3,9)<srp>\";\n\neval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n```\n\n首先观察这个变量wlkji可以发现它很像是javascript的代码，事实上它确实是一段javascript代码，通过把一句javascript语句按照奇偶数位的字符分离得到。最开始我是通过在sublime中观察后，利用这一点半自动（几乎手动）拼出了wlkji中字符串表示的js代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n然后通过：\n\n```javascript\nvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n```\n\n计算出密码即可。\n\n因为对js不熟悉，所以中间的过程都是用python写的：\n\n```python\n# 拼接js\ndef func(s1, s2):\n    return ''.join(list(map((lambda a, b: a + b), s1, s2)))\n# 例如：\n# s1 = vrnmra  e aera(2,4,7,6,8,5,1,3,9)\n# s2 = a uAry=nwmkAry'''''''''''''''''';\n# func(s1, s2) --> var numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n最终得到了wlkji中的字符串表示的代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n到这里再用password函数中pass所在的表达式计算一下即可。\n\n这一关本来的意图其实是javascript中的escape编码和eval加解密：\n\n> eval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n通过[在线解密](http://www.bejson.com/enc/eval_package/)解密后得到eval执行的字符串内容为\n\n```javascript\nfunction RsRsRsRs(teaabb) \n{\n    var tttmmm=\"\";\n    l=teaabb.length;\n    www=hhhhffff=Math.round(l/2);\n    if(l<2*www)\n        hhhhffff=hhhhffff-1;\n    for(i=0;i<hhhhffff;i++)\n        tttmmm = tttmmm + teaabb.charAt(i)+ teaabb.charAt(i+hhhhffff);\n    if(l<2*www)\n        tttmmm = tttmmm + teaabb.charAt(l-1);\n    document.write(tttmmm);\n}\n\nRsRsRsRs(wlkji);\n```\n\n只需要将wlkji带入该函数即可得到和上面手工拼接相同的代码，这段解密代码也非常容易改写成python的形式。\n\n### 备注\n\n#### JavaScript eval() 函数\n\neval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。\n\n如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。\n\n**语法**\n\neval(*string*)\n\n#### JavaScript charAt() 方法\n\n返回特定位置的字符\n\n```javascript\nvar str = \"python\";\nvar n = str.charAt(2)\n// output: 't'\n```\n\n#### JavaScript round() 方法\n\nround() 方法可把一个数字舍入为最接近(四舍五入)的整数：\n\n```javascript\nMath.round(0.5);\n// output: 1\n```\n\n\n\n\n\n\n\n",[[1508291386647,["xaut@xaut-PC",[[-1,130,"..\\"]],[132,132],[130,130]]],[1508291388380,["xaut@xaut-PC",[[1,130,"\\"]],[130,130],[131,131]]],[1508291390235,["xaut@xaut-PC",[[1,130,".."]],[130,130],[132,132]]],[1508291393152,["xaut@xaut-PC",[[1,130,"\\"]],[130,130],[131,131]]],[1508291398033,["xaut@xaut-PC",[[-1,130,"\\..\\images\\hmdxd01-1.png"]],[131,131],[130,130]]],[1508291398770,["xaut@xaut-PC",[[1,130,"\\"]],[130,130],[131,131]]],[1508291407466,["xaut@xaut-PC",[[1,130,".."]],[130,130],[132,132]]],[1508291418818,["xaut@xaut-PC",[[1,133,"images\\hmdxd01-1,"]],[133,133],[150,150]]],[1508291419575,["xaut@xaut-PC",[[-1,149,","]],[150,150],[149,149]]],[1508291420853,["xaut@xaut-PC",[[1,149,".png"]],[149,149],[153,153]]],[1508291511584,["xaut@xaut-PC",[[-1,130,".."],[1,132,"D:\\Code\\hexo\\blog\\source"]],[130,153],[175,175]]]]],["15ae6460-bd73-49f2-af3e-ebd1597e3cb1",1508292172063,"---\ntitle: 哈密顿行动0x01-获取密码\ntags:\n  - python\n  - javascript\ndate: 2017-08-29 23:35:54\n---\n\n### 关卡描述\n\n进入第一关，是需要得到一个密码。\n\n![hmdxd01-1](..\\images\\hmdxd01-1.png)\n\n### 关卡解答\n\n一般这种游戏第一关都比较套路了，想知道的都在源码里。所以打开源码看一下：\n\n```javascript\n<SCRIPT language=JavaScript>\n\n<!--\n// 由给定的数组生成一个新的数组，其实就是在最前面添了没用的一位\nfunction makeArray(){\n\tthis.length = makeArray.arguments.length \n        \t\tfor (var i = 0; i < this.length; i++)\n        \t\t\tthis[i + 1] = makeArray.arguments[i]\n    \t}\nvar Array = new makeArray('B','R','E','L','E','F','O','A','T');\n\n// 生成密码的函数\nfunction password() {\n\tvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n\n\tvar num = 1;\n\tvar pass1 = prompt('Please Enter Your Password','');\n\n\t\twhile (num < 2) {\n\t\t\tif (pass1 == pass) {\n\t\t\t\talert('WOW! OK, OK, this is begin ...')\nbreak;\n\t\t} \n\n\tnum+=1;\n\tvar pass1 =alert(\"wrong! idoit you are! i am strong!strong!strong!strong!strong!strong!strong!\")\n\t}\n}\n// -->\n</SCRIPT>\n\n```\n\n到这里已经可以知道密码是如何生成的了。再接着看看下面的源码：\n\n```javascript\nwlkji=\"<citlnug=JvSrp\\\"\\r\\rfnto aera({\\nhslnt  aera.ruet.egh\\no vri=0   hslnt;i+\\rti[  ]=mkAryagmnsi\\r}\\na uAry=nwmkAry'''''''''''''''''';/citsrp agae\\\"aacit>\\n\\nucinmkAry)\\rti.egh=mkAryagmnslnt\\rfr(a   ;i<ti.egh +)\\nhsi+1  aera.ruet[]\\n\\rvrnmra  e aera(2,4,7,6,8,5,1,3,9)<srp>\";\n\neval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n```\n\n首先观察这个变量wlkji可以发现它很像是javascript的代码，事实上它确实是一段javascript代码，通过把一句javascript语句按照奇偶数位的字符分离得到。最开始我是通过在sublime中观察后，利用这一点半自动（几乎手动）拼出了wlkji中字符串表示的js代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n然后通过：\n\n```javascript\nvar pass =\n(numArray[7])+(numArray[2])+(numArray[8])+(numArray[6])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[9])+(numArray[4])+(numArray[6])+(numArray[8])+(numArray[3])+(numArray[1])+(numArray[5])+(numArray[2])+(numArray[6])+(numArray[3])+(numArray[9])+(numArray[7])+(numArray[4])+(numArray[4])+(numArray[4])+(numArray[2])+(numArray[8])+(numArray[6]);\n```\n\n计算出密码即可。\n\n因为对js不熟悉，所以中间的过程都是用python写的：\n\n```python\n# 拼接js\ndef func(s1, s2):\n    return ''.join(list(map((lambda a, b: a + b), s1, s2)))\n# 例如：\n# s1 = vrnmra  e aera(2,4,7,6,8,5,1,3,9)\n# s2 = a uAry=nwmkAry'''''''''''''''''';\n# func(s1, s2) --> var numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n最终得到了wlkji中的字符串表示的代码：\n\n```javascript\nfunction makeArray()\n{\n    this.length = makeArray.arguments.length;\n    for (var i = 0; i < this.length; i++)\n        this[i + 1] = makeArray.arguments[i];\n}\n\nvar numArray = new makeArray('2','4','7','6','8','5','1','3','9');\n```\n\n到这里再用password函数中pass所在的表达式计算一下即可。\n\n这一关本来的意图其实是javascript中的escape编码和eval加解密：\n\n> eval(unescape(\"function%20RsRsRsRs%28teaabb%29%20%7Bvar%20tttmmm%3D%22%22%3Bl%3Dteaabb.length%3Bwww%3Dhhhhffff%3DMath.round%28l/2%29%3Bif%28l%3C2*www%29hhhhffff%3Dhhhhffff-1%3Bfor%28i%3D0%3Bi%3Chhhhffff%3Bi++%29tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28i%29+%20teaabb.charAt%28i+hhhhffff%29%3Bif%28l%3C2*www%29%20tttmmm%20%3D%20tttmmm%20+%20teaabb.charAt%28l-1%29%3Bdocument.write%28tttmmm%29%3B%7DRsRsRsRs%28wlkji%29%3B\"));\n\n通过[在线解密](http://www.bejson.com/enc/eval_package/)解密后得到eval执行的字符串内容为\n\n```javascript\nfunction RsRsRsRs(teaabb) \n{\n    var tttmmm=\"\";\n    l=teaabb.length;\n    www=hhhhffff=Math.round(l/2);\n    if(l<2*www)\n        hhhhffff=hhhhffff-1;\n    for(i=0;i<hhhhffff;i++)\n        tttmmm = tttmmm + teaabb.charAt(i)+ teaabb.charAt(i+hhhhffff);\n    if(l<2*www)\n        tttmmm = tttmmm + teaabb.charAt(l-1);\n    document.write(tttmmm);\n}\n\nRsRsRsRs(wlkji);\n```\n\n只需要将wlkji带入该函数即可得到和上面手工拼接相同的代码，这段解密代码也非常容易改写成python的形式。\n\n### 备注\n\n#### JavaScript eval() 函数\n\neval() 函数计算 JavaScript 字符串，并把它作为脚本代码来执行。\n\n如果参数是一个表达式，eval() 函数将执行表达式。如果参数是Javascript语句，eval()将执行 Javascript 语句。\n\n**语法**\n\neval(*string*)\n\n#### JavaScript charAt() 方法\n\n返回特定位置的字符\n\n```javascript\nvar str = \"python\";\nvar n = str.charAt(2)\n// output: 't'\n```\n\n#### JavaScript round() 方法\n\nround() 方法可把一个数字舍入为最接近(四舍五入)的整数：\n\n```javascript\nMath.round(0.5);\n// output: 1\n```\n\n\n\n\n\n\n\n",[[1508292137227,["xaut@xaut-PC",[[-1,130,"..\\"]],[133,133],[130,130]]],[1508292137939,["xaut@xaut-PC",[[1,130,"、"]],[130,130],[131,131]]],[1508292138609,["xaut@xaut-PC",[[-1,130,"、"]],[131,131],[130,130]]],[1508292138961,["xaut@xaut-PC",[[1,130,"/"]],[130,130],[131,131]]],[1508292140723,["xaut@xaut-PC",[[-1,137,"\\"]],[138,138],[137,137]]],[1508292141116,["xaut@xaut-PC",[[1,137,"/"]],[137,137],[138,138]]],[1508292161824,["xaut@xaut-PC",[[1,130,"source"]],[130,130],[136,136]]],[1508292164371,["xaut@xaut-PC",[[-1,130,"source"]],[136,136],[130,130]]],[1508292165556,["xaut@xaut-PC",[[1,130,".."]],[130,130],[132,132]]],[1508292166624,["xaut@xaut-PC",[[-1,131,"."]],[132,132],[131,131]]]]]]}